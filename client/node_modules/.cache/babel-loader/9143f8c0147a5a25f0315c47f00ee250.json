{"ast":null,"code":"import * as React from \"react\";\nimport { getPathForRoute, useCurrentRouteId, useRouter } from \"../router/index.js\";\nimport { parseFramerPageLink, PathVariablesContext } from \"./framerPageLink.js\";\nimport { preloadComponent } from \"../router/index.js\";\n\nfunction isInternalURL(href) {\n  if (href.startsWith(\"#\") || href.startsWith(\"/\")) return true;\n  return false;\n}\n\nfunction isValidURL(href, isInternal) {\n  try {\n    const url = new URL(href);\n    return Boolean(url.protocol); // in theory this should always be true, but just in case?\n  } catch {// Ignore thrown errors.\n  }\n\n  return isInternal;\n}\n\nexport function propsForLink(href) {\n  const isInternal = isInternalURL(href);\n  return {\n    href: isValidURL(href, isInternal) ? href : `https://${href}`,\n    target: isInternal ? undefined : \"_blank\",\n    rel: !isInternal ? \"noreferrer noopener\" : undefined\n  };\n}\n/** @public */\n\nexport const Link = React.forwardRef((_ref, forwardedRef) => {\n  let {\n    children,\n    href,\n    ...restProps\n  } = _ref;\n  const router = useRouter();\n  const currentRouteId = useCurrentRouteId();\n  const pathVariables = React.useContext(PathVariablesContext);\n  const props = React.useMemo(() => {\n    const pageLink = parseFramerPageLink(href);\n\n    if (!pageLink) {\n      return propsForLink(href);\n    }\n\n    const currentRoute = currentRouteId ? router?.getRoute?.(currentRouteId) : undefined;\n\n    if (pageLink.target) {\n      const routeId = pageLink.target;\n      const elementId = pageLink.element ?? undefined;\n      const route = router?.getRoute?.(routeId, pathVariables);\n      if (route) preloadComponent(route?.page);\n      return {\n        href: getPathForRoute(route, {\n          currentRoutePath: currentRoute?.path,\n          elementId\n        }),\n\n        onClick(event) {\n          event.preventDefault();\n          router?.navigate?.(routeId, elementId, pathVariables);\n        }\n\n      };\n    }\n\n    return {};\n  }, [currentRouteId, href, pathVariables, router]);\n  if (!children) return null;\n  const child = React.Children.only(children);\n  if (!React.isValidElement(child)) return null;\n  return React.cloneElement(child, { ...restProps,\n    ...props,\n    ref: forwardedRef\n  });\n});","map":{"version":3,"mappings":"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","names":["React","getPathForRoute","useCurrentRouteId","useRouter","parseFramerPageLink","PathVariablesContext","preloadComponent","isInternalURL","href","startsWith","isValidURL","isInternal","url","URL","Boolean","protocol","propsForLink","target","undefined","rel","Link","forwardRef","forwardedRef","children","restProps","router","currentRouteId","pathVariables","useContext","props","useMemo","pageLink","currentRoute","getRoute","routeId","elementId","element","route","page","currentRoutePath","path","onClick","event","preventDefault","navigate","child","Children","only","isValidElement","cloneElement","ref"],"sources":["../../src/modules/Link.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}