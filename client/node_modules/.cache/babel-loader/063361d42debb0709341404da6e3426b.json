{"ast":null,"code":"import React from \"react\";\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // import {api} from '../services/api';\n\nconst initialState = {\n  strategies: [],\n  loading: false\n};\nexport const getStrategies = createAsyncThunk(\"strategies/getStrategies\", async thunkAPI => {\n  try {\n    return fetch(`http://localhost:3001/api/v1/strategies`).then(res => {\n      return res.json();\n    }).then(data => {\n      const strategies = [];\n\n      for (const key in data) {\n        strategies.push(data[key]);\n      }\n    });\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n});\nexport const addStrategy = createAsyncThunk(\"strategies/addStrategy\", async thunkAPI => {\n  try {\n    return await axios.post(`http://localhost:3000/api/v1/strategies`).then(res => res.json());\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n});\nexport const postStrategies = createAsyncThunk(\"strategies/postStrategies\", async thunkAPI => {\n  try {\n    return await fetch(`http://localhost:3001/api/v1/strategies`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(thunkAPI.payload)\n    }).then(res => res.json());\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // export const fetchStrategyByStatus = createAsyncThunk(\n//   'strategies/fetchStrategyByStatus',\n//   async () => {\n//     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n//       res.json()\n//     );\n//   }\n// )\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: {\n    strategies: [],\n    status: null\n  },\n  reducers: {\n    addName: (state, action) => {\n      return { ...state,\n        addTitle: [...action.payload]\n      };\n    },\n    addCategory: (state, action) => {\n      return { ...state,\n        addCategory: [...action.payload]\n      };\n    },\n    addTier: (state, action) => {\n      return { ...state,\n        addTier: [...action.payload]\n      };\n    },\n    addReference: (state, action) => {\n      return { ...state,\n        addReference: [...action.payload]\n      };\n    },\n    addDescription: (state, action) => {\n      return { ...state,\n        addDescription: [...action.payload]\n      };\n    }\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeeded\";\n    },\n    [getStrategies.rejected]: (state, action) => {\n      state.status = \"failed\";\n    }\n  }\n});\nexport const {\n  addName,\n  addDescription,\n  addReference,\n  addCategory,\n  addTier\n} = strategySlice.actions;\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["React","createSlice","createAsyncThunk","initialState","strategies","loading","getStrategies","thunkAPI","fetch","then","res","json","data","key","push","error","rejectWithValue","message","addStrategy","axios","post","postStrategies","method","headers","Accept","body","JSON","stringify","payload","strategySlice","name","status","reducers","addName","state","action","addTitle","addCategory","addTier","addReference","addDescription","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import React  from \"react\";\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import {api} from '../services/api';\n\nconst initialState = {\n    strategies: [],\n    loading: false,\n};\n\nexport const getStrategies = createAsyncThunk(\n  \"strategies/getStrategies\",\n  async (thunkAPI) => {\n      try {\n        return fetch(`http://localhost:3001/api/v1/strategies`)\n          .then((res) => {\n            return res.json();\n          })\n          .then( (data) =>  {\n            const strategies = [];\n            for(const key in data) {\n              strategies.push(data[key]);\n            }\n          });\n        \n      } catch (error) {\n        return thunkAPI.rejectWithValue({ error: error.message });\n      }\n  }\n);\n\nexport const addStrategy = createAsyncThunk(\n  \"strategies/addStrategy\",\n  async (thunkAPI) => {\n    try {\n      return await axios\n        .post(`http://localhost:3000/api/v1/strategies`)\n        .then((res) => res.json());\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\nexport const postStrategies = createAsyncThunk(\n  \"strategies/postStrategies\",\n  async (thunkAPI) => {\n    try {\n      return await fetch(`http://localhost:3001/api/v1/strategies`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify(thunkAPI.payload),\n      }).then((res) => res.json());\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\n// export const fetchStrategyByStatus = createAsyncThunk(\n//   'strategies/fetchStrategyByStatus',\n//   async () => {\n//     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n//       res.json()\n//     );\n//   }\n// )\n\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: { strategies: [], status: null },\n  reducers: {\n    addName: (state, action) => {\n      return { ...state, addTitle: [...action.payload] };\n    },\n    addCategory: (state, action) => {\n      return { ...state, addCategory: [...action.payload] };\n    },\n    addTier: (state, action) => {\n      return { ...state, addTier: [...action.payload] };\n    },\n    addReference: (state, action) => {\n      return { ...state, addReference: [...action.payload] };\n    },\n    addDescription: (state, action) => {\n      return { ...state, addDescription: [...action.payload] };\n    },\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeeded\";\n    },\n    [getStrategies.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n  },\n});\n\nexport const { addName, addDescription, addReference, addCategory, addTier } =\n  strategySlice.actions;\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}