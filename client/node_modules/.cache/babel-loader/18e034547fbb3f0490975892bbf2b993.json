{"ast":null,"code":"// import { configureStore, createAsyncThunk} from '@reduxjs/toolkit';\n// import {abenaApi} from '../services/api';\n// import { strategySlice } from '../components/strategies/strategySlice';\n// import { studentSlice } from '../components/students/studentSlice';\n// // createAsyncThunk accepts three parameters: a string action type value, a payloadCreator callback, and an options object.\n// // For example, a type argument of 'users/requestStatus' will generate these action types:\n// // pending: 'users/requestStatus/pending'\n// // fulfilled: 'users/requestStatus/fulfilled'\n// // rejected: 'users/requestStatus/rejected'\n// const fetchUserById = createAsyncThunk(\n//     'users/fetchUserById',\n//     async (id, thunkAPI) => {\n//         const response = await abenaApi.get(`/users/${id}`);\n//         return response.data;\n//     }\n// );\n// const fetchStrategyByStatus = createAsyncThunk(\n//     'strategy/fetchStrategyByStatus', \n//     async (status, thunkAPI) => {\n//         const response = await abenaApi.get(`/strategies/${id}`);\n//         return response.data;\n//     }\n// )\n// const submitReqStrategy = createAsyncThunk(\n//     'strategy/submitReqStrategy',\n//     async(requestStrategy, thunkAPI)=> {\n//         const response = await abenaApi.post(`/strategies`);\n//         return response.data;\n//     }\n// )\n// // Later, dispatch the thunk as needed in the app\n// export const store = configureStore({\n//     reducer:{\n//         strategySlice: strategySlice,\n//         studentSlice: studentSlice\n//     }\n// })","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/services/store.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["// import { configureStore, createAsyncThunk} from '@reduxjs/toolkit';\n// import {abenaApi} from '../services/api';\n// import { strategySlice } from '../components/strategies/strategySlice';\n// import { studentSlice } from '../components/students/studentSlice';\n\n\n// // createAsyncThunk accepts three parameters: a string action type value, a payloadCreator callback, and an options object.\n// // For example, a type argument of 'users/requestStatus' will generate these action types:\n\n// // pending: 'users/requestStatus/pending'\n// // fulfilled: 'users/requestStatus/fulfilled'\n// // rejected: 'users/requestStatus/rejected'\n\n// const fetchUserById = createAsyncThunk(\n//     'users/fetchUserById',\n//     async (id, thunkAPI) => {\n//         const response = await abenaApi.get(`/users/${id}`);\n//         return response.data;\n//     }\n// );\n\n// const fetchStrategyByStatus = createAsyncThunk(\n//     'strategy/fetchStrategyByStatus', \n//     async (status, thunkAPI) => {\n//         const response = await abenaApi.get(`/strategies/${id}`);\n//         return response.data;\n//     }\n// )\n\n// const submitReqStrategy = createAsyncThunk(\n//     'strategy/submitReqStrategy',\n//     async(requestStrategy, thunkAPI)=> {\n//         const response = await abenaApi.post(`/strategies`);\n//         return response.data;\n//     }\n\n// )\n\n\n// // Later, dispatch the thunk as needed in the app\n\n\n\n// export const store = configureStore({\n//     reducer:{\n//         strategySlice: strategySlice,\n//         studentSlice: studentSlice\n        \n//     }\n// })"]},"metadata":{},"sourceType":"module"}