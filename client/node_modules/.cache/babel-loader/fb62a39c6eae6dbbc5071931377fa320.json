{"ast":null,"code":"import { useMemo } from \"react\";\n/**\n * Given a collection (array of objects), a path template (e.g., `/blog/:slug`)\n * and a concrete path (e.g., `/blog/hello-world`), returns an object with data\n * for the record in the collection that has a matching property (e.g.,\n * `record.slug === \"hello-world\"`). Returns `null` if no record was found.\n * @internal\n */\n\nexport function useDataRecord(collection, pathTemplate, path) {\n  const pathParser = useMemo(() => getPathParser(pathTemplate), [pathTemplate]);\n  const variables = useMemo(() => pathParser(path), [pathParser, path]);\n  return useMemo(() => {\n    if (!Array.isArray(collection)) {\n      return null;\n    }\n\n    const pageRecord = collection.find(record => {\n      return Object.entries(variables).every(_ref => {\n        let [key, value] = _ref;\n        return record[key] !== undefined && String(record[key]) === value;\n      });\n    });\n    return pageRecord ?? null;\n  }, [collection, variables]);\n}\nconst rePathVariables = /:([a-zA-Z][a-zA-Z0-9_]*)/g;\n/**\n * Turns a path pattern like `/blog/:slug` into a function that can receive an\n * actual path like `/blog/hello-world` and return an object with the matched\n * variables (`{ slug: \"hello-world\" }`).\n */\n\nfunction getPathParser(path) {\n  const names = [];\n  const re = new RegExp(rePathVariables);\n  let pathVariableMatch;\n\n  while ((pathVariableMatch = re.exec(path)) !== null) {\n    names.push(pathVariableMatch[1]);\n  }\n\n  const safePath = escapeStringRegexp(path);\n  const pathMatcher = new RegExp(`^${safePath.replace(rePathVariables, \"([^/]+)\")}$`);\n  return input => {\n    const result = {};\n    const match = input.match(pathMatcher);\n\n    if (match) {\n      for (let i = 1; i < match.length; i++) {\n        result[names[i - 1]] = decodeURIComponent(match[i]);\n      }\n    }\n\n    return result;\n  };\n}\n\nfunction escapeStringRegexp(string) {\n  return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\").replace(/-/g, \"\\\\x2d\");\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA;;;;;;;;AAOA,OAAM,SAAUC,aAAV,CACFC,UADE,EAEFC,YAFE,EAGFC,IAHE,EAGU;AAEZ,QAAMC,UAAU,GAAGL,OAAO,CAAC,MAAMM,aAAa,CAACH,YAAD,CAApB,EAAoC,CAACA,YAAD,CAApC,CAA1B;AACA,QAAMI,SAAS,GAAGP,OAAO,CAAC,MAAMK,UAAU,CAACD,IAAD,CAAjB,EAAyB,CAACC,UAAD,EAAaD,IAAb,CAAzB,CAAzB;AACA,SAAOJ,OAAO,CAAC,MAAK;AAChB,QAAI,CAACQ,KAAK,CAACC,OAAN,CAAcP,UAAd,CAAL,EAAgC;AAC5B,aAAO,IAAP;AACH;;AACD,UAAMQ,UAAU,GAAGR,UAAU,CAACS,IAAX,CAAgBC,MAAM,IAAG;AACxC,aAAOC,MAAM,CAACC,OAAP,CAAeP,SAAf,EAA0BQ,KAA1B,CACH;AAAA,YAAC,CAACC,GAAD,EAAMC,KAAN,CAAD;AAAA,eAAkBL,MAAM,CAACI,GAAD,CAAN,KAAgBE,SAAhB,IAA6BC,MAAM,CAACP,MAAM,CAACI,GAAD,CAAP,CAAN,KAAwBC,KAAvE;AAAA,OADG,CAAP;AAGH,KAJkB,CAAnB;AAKA,WAAOP,UAAU,IAAI,IAArB;AACH,GAVa,EAUX,CAACR,UAAD,EAAaK,SAAb,CAVW,CAAd;AAWH;AAED,MAAMa,eAAe,GAAG,2BAAxB;AAEA;;;;;;AAKA,SAASd,aAAT,CAAuBF,IAAvB,EAAmC;AAC/B,QAAMiB,KAAK,GAAa,EAAxB;AACA,QAAMC,EAAE,GAAG,IAAIC,MAAJ,CAAWH,eAAX,CAAX;AACA,MAAII,iBAAJ;;AACA,SAAO,CAACA,iBAAiB,GAAGF,EAAE,CAACG,IAAH,CAAQrB,IAAR,CAArB,MAAwC,IAA/C,EAAqD;AACjDiB,SAAK,CAACK,IAAN,CAAWF,iBAAiB,CAAC,CAAD,CAA5B;AACH;;AAED,QAAMG,QAAQ,GAAGC,kBAAkB,CAACxB,IAAD,CAAnC;AACA,QAAMyB,WAAW,GAAG,IAAIN,MAAJ,CAAW,IAAII,QAAQ,CAACG,OAAT,CAAiBV,eAAjB,EAAkC,SAAlC,CAA4C,GAA3D,CAApB;AAEA,SAAQW,KAAD,IAAkB;AACrB,UAAMC,MAAM,GAA2B,EAAvC;AACA,UAAMC,KAAK,GAAGF,KAAK,CAACE,KAAN,CAAYJ,WAAZ,CAAd;;AACA,QAAII,KAAJ,EAAW;AACP,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCF,cAAM,CAACX,KAAK,CAACa,CAAC,GAAG,CAAL,CAAN,CAAN,GAAuBE,kBAAkB,CAACH,KAAK,CAACC,CAAD,CAAN,CAAzC;AACH;AACJ;;AACD,WAAOF,MAAP;AACH,GATD;AAUH;;AAED,SAASJ,kBAAT,CAA4BS,MAA5B,EAA0C;AACtC,SAAOA,MAAM,CAACP,OAAP,CAAe,qBAAf,EAAsC,MAAtC,EAA8CA,OAA9C,CAAsD,IAAtD,EAA4D,OAA5D,CAAP;AACH","names":["useMemo","useDataRecord","collection","pathTemplate","path","pathParser","getPathParser","variables","Array","isArray","pageRecord","find","record","Object","entries","every","key","value","undefined","String","rePathVariables","names","re","RegExp","pathVariableMatch","exec","push","safePath","escapeStringRegexp","pathMatcher","replace","input","result","match","i","length","decodeURIComponent","string"],"sources":["../../src/modules/useDataRecord.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}