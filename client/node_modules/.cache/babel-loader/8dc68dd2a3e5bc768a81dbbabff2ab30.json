{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"redux-toolkit\";\nexport const getStrategies = createAsyncThunk('strategies/getStrategies', async () => {\n  return await fetch(\"http://localhost:3000/api/v1/strategies\");\n});\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: {\n    strategies: [],\n    status: null\n  },\n  reducers: {\n    addStrategyCategory: (state, action) => {\n      return { ...state,\n        strategyCategory: [...action.payload]\n      };\n    },\n    addStrategyStatus: (state, action) => {\n      return { ...state,\n        strategyStatus: [...action.payload]\n      };\n    },\n    addStrategyTier: (state, action) => {\n      return { ...state,\n        strategyTier: [...action.payload]\n      };\n    },\n    addStrategyReference: (state, action) => {\n      return { ...state,\n        strategyReference: [...action.payload]\n      };\n    },\n    addStrategyStudent: (state, action) => {\n      return { ...state,\n        strategyStudent: [...action.payload]\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchStrategyByStatus.fulfilled, (state, action) => {\n      state.strategies.push(action.payload);\n    });\n  }\n});\nexport const {\n  addStrategyCategory,\n  addStrategyReference,\n  addStrategyStatus,\n  addStrategyTier,\n  addStrategyStudent\n} = strategySlice.actions;\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["createSlice","createAsyncThunk","getStrategies","fetch","strategySlice","name","initialState","strategies","status","reducers","addStrategyCategory","state","action","strategyCategory","payload","addStrategyStatus","strategyStatus","addStrategyTier","strategyTier","addStrategyReference","strategyReference","addStrategyStudent","strategyStudent","extraReducers","builder","addCase","fetchStrategyByStatus","fulfilled","push","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAuBC,gBAAvB,QAA8C,eAA9C;AAEA,OAAO,MAAMC,aAAa,GAAGD,gBAAgB,CAC3C,0BAD2C,EAE3C,YAAY;AACV,SAAO,MAAME,KAAK,CAAC,yCAAD,CAAlB;AACD,CAJ0C,CAAtC;AAOP,MAAMC,aAAa,GAAGJ,WAAW,CAAC;AAChCK,EAAAA,IAAI,EAAE,YAD0B;AAEhCC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,UAAU,EAAE,EAAd;AAAkBC,IAAAA,MAAM,EAAE;AAA1B,GAFkB;AAGhCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBAAmB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,aAAO,EAAE,GAAGD,KAAL;AAAYE,QAAAA,gBAAgB,EAAE,CAAC,GAAGD,MAAM,CAACE,OAAX;AAA9B,OAAP;AACD,KAHO;AAIRC,IAAAA,iBAAiB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACpC,aAAO,EAAE,GAAGD,KAAL;AAAYK,QAAAA,cAAc,EAAE,CAAC,GAAGJ,MAAM,CAACE,OAAX;AAA5B,OAAP;AACD,KANO;AAORG,IAAAA,eAAe,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAClC,aAAO,EAAE,GAAGD,KAAL;AAAYO,QAAAA,YAAY,EAAE,CAAC,GAAGN,MAAM,CAACE,OAAX;AAA1B,OAAP;AACD,KATO;AAURK,IAAAA,oBAAoB,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACvC,aAAO,EAAE,GAAGD,KAAL;AAAYS,QAAAA,iBAAiB,EAAE,CAAC,GAAGR,MAAM,CAACE,OAAX;AAA/B,OAAP;AACD,KAZO;AAaRO,IAAAA,kBAAkB,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACrC,aAAO,EAAE,GAAGD,KAAL;AAAYW,QAAAA,eAAe,EAAE,CAAC,GAAGV,MAAM,CAACE,OAAX;AAA7B,OAAP;AACD;AAfO,GAHsB;AAoBhCS,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBC,qBAAqB,CAACC,SAAtC,EAAiD,CAAChB,KAAD,EAAQC,MAAR,KAAmB;AAClED,MAAAA,KAAK,CAACJ,UAAN,CAAiBqB,IAAjB,CAAsBhB,MAAM,CAACE,OAA7B;AACD,KAFD;AAGD;AAxB+B,CAAD,CAAjC;AA2BA,OAAO,MAAM;AACXJ,EAAAA,mBADW;AAEXS,EAAAA,oBAFW;AAGXJ,EAAAA,iBAHW;AAIXE,EAAAA,eAJW;AAKXI,EAAAA;AALW,IAMTjB,aAAa,CAACyB,OANX;AAQP,eAAezB,aAAa,CAAC0B,OAA7B","sourcesContent":["import { createSlice , createAsyncThunk} from \"redux-toolkit\";\n\nexport const getStrategies = createAsyncThunk(\n  'strategies/getStrategies',\n  async () => {\n    return await fetch(\"http://localhost:3000/api/v1/strategies\")\n  }\n);\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: { strategies: [], status: null },\n  reducers: {\n    addStrategyCategory: (state, action) => {\n      return { ...state, strategyCategory: [...action.payload] };\n    },\n    addStrategyStatus: (state, action) => {\n      return { ...state, strategyStatus: [...action.payload] };\n    },\n    addStrategyTier: (state, action) => {\n      return { ...state, strategyTier: [...action.payload] };\n    },\n    addStrategyReference: (state, action) => {\n      return { ...state, strategyReference: [...action.payload] };\n    },\n    addStrategyStudent: (state, action) => {\n      return { ...state, strategyStudent: [...action.payload] };\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchStrategyByStatus.fulfilled, (state, action) => {\n      state.strategies.push(action.payload);\n    });\n  },\n});\n\nexport const {\n  addStrategyCategory,\n  addStrategyReference,\n  addStrategyStatus,\n  addStrategyTier,\n  addStrategyStudent,\n} = strategySlice.actions;\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}