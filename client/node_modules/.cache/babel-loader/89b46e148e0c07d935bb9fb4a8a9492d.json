{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"redux-toolkit\"; // createAsyncThunk accepts three parameters: a string action type value, a payloadCreator callback, and an options object.\n// For example, a type argument of 'users/requestStatus' will generate these action types:\n//  'users/requestStatus'\n//  'users/requestStatus/pending'\n//  'users/requestStatus/fulfilled'\n\nexport const getStrategies = createAsyncThunk(\"strategies/getStrategies\", async () => {\n  return await fetch(`http://localhost:3000/api/v1/strategies`).then(res => res.json());\n}); // export const fetchStrategyByStatus = createAsyncThunk(\n//   'strategies/fetchStrategyByStatus', \n//   async () => {\n//     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n//       res.json()\n//     );\n//   }\n// )\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: {\n    strategies: [],\n    status: null\n  },\n  reducers: {\n    addStrategyCategory: (state, action) => {\n      return { ...state,\n        strategyCategory: [...action.payload]\n      };\n    },\n    addStrategyStatus: (state, action) => {\n      return { ...state,\n        strategyStatus: [...action.payload]\n      };\n    },\n    addStrategyTier: (state, action) => {\n      return { ...state,\n        strategyTier: [...action.payload]\n      };\n    },\n    addStrategyReference: (state, action) => {\n      return { ...state,\n        strategyReference: [...action.payload]\n      };\n    },\n    addStrategyStudent: (state, action) => {\n      return { ...state,\n        strategyStudent: [...action.payload]\n      };\n    }\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeeded\";\n    },\n    [getStrategies.rejected]: (state, action) => {\n      state.status = \"failed\";\n    }\n  }\n});\nexport const {\n  addStrategyCategory,\n  addStrategyReference,\n  addStrategyStatus,\n  addStrategyTier,\n  addStrategyStudent\n} = strategySlice.actions;\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["createSlice","createAsyncThunk","getStrategies","fetch","then","res","json","strategySlice","name","initialState","strategies","status","reducers","addStrategyCategory","state","action","strategyCategory","payload","addStrategyStatus","strategyStatus","addStrategyTier","strategyTier","addStrategyReference","strategyReference","addStrategyStudent","strategyStudent","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,eAA9C,C,CAGA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGD,gBAAgB,CAC3C,0BAD2C,EAE3C,YAAY;AACV,SAAO,MAAME,KAAK,CAAE,yCAAF,CAAL,CAAiDC,IAAjD,CAAuDC,GAAD,IACjEA,GAAG,CAACC,IAAJ,EADW,CAAb;AAGD,CAN0C,CAAtC,C,CASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,MAAMC,aAAa,GAAGP,WAAW,CAAC;AAChCQ,EAAAA,IAAI,EAAE,YAD0B;AAEhCC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,UAAU,EAAE,EAAd;AAAkBC,IAAAA,MAAM,EAAE;AAA1B,GAFkB;AAGhCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBAAmB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,aAAO,EAAE,GAAGD,KAAL;AAAYE,QAAAA,gBAAgB,EAAE,CAAC,GAAGD,MAAM,CAACE,OAAX;AAA9B,OAAP;AACD,KAHO;AAIRC,IAAAA,iBAAiB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACpC,aAAO,EAAE,GAAGD,KAAL;AAAYK,QAAAA,cAAc,EAAE,CAAC,GAAGJ,MAAM,CAACE,OAAX;AAA5B,OAAP;AACD,KANO;AAORG,IAAAA,eAAe,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAClC,aAAO,EAAE,GAAGD,KAAL;AAAYO,QAAAA,YAAY,EAAE,CAAC,GAAGN,MAAM,CAACE,OAAX;AAA1B,OAAP;AACD,KATO;AAURK,IAAAA,oBAAoB,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACvC,aAAO,EAAE,GAAGD,KAAL;AAAYS,QAAAA,iBAAiB,EAAE,CAAC,GAAGR,MAAM,CAACE,OAAX;AAA/B,OAAP;AACD,KAZO;AAaRO,IAAAA,kBAAkB,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACrC,aAAO,EAAE,GAAGD,KAAL;AAAYW,QAAAA,eAAe,EAAE,CAAC,GAAGV,MAAM,CAACE,OAAX;AAA7B,OAAP;AACD;AAfO,GAHsB;AAoBhCS,EAAAA,aAAa,EAAE;AACb,KAACxB,aAAa,CAACyB,OAAf,GAAyB,CAACb,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,MAAAA,KAAK,CAACH,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACT,aAAa,CAAC0B,SAAf,GAA2B,CAACd,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACJ,UAAN,GAAmBK,MAAM,CAACE,OAA1B;AACAH,MAAAA,KAAK,CAACH,MAAN,GAAe,WAAf;AACD,KAPY;AAQb,KAACT,aAAa,CAAC2B,QAAf,GAA0B,CAACf,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACH,MAAN,GAAe,QAAf;AACD;AAVY;AApBiB,CAAD,CAAjC;AAkCA,OAAO,MAAM;AACXE,EAAAA,mBADW;AAEXS,EAAAA,oBAFW;AAGXJ,EAAAA,iBAHW;AAIXE,EAAAA,eAJW;AAKXI,EAAAA;AALW,IAMTjB,aAAa,CAACuB,OANX;AAQP,eAAevB,aAAa,CAACwB,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from \"redux-toolkit\";\n\n\n// createAsyncThunk accepts three parameters: a string action type value, a payloadCreator callback, and an options object.\n// For example, a type argument of 'users/requestStatus' will generate these action types:\n\n//  'users/requestStatus'\n//  'users/requestStatus/pending'\n//  'users/requestStatus/fulfilled'\n\nexport const getStrategies = createAsyncThunk(\n  \"strategies/getStrategies\",\n  async () => {\n    return await fetch(`http://localhost:3000/api/v1/strategies`).then((res) =>\n      res.json()\n    );\n  }\n);\n\n// export const fetchStrategyByStatus = createAsyncThunk(\n//   'strategies/fetchStrategyByStatus', \n//   async () => {\n//     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n//       res.json()\n//     );\n//   }\n// )\n\n\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: { strategies: [], status: null },\n  reducers: {\n    addStrategyCategory: (state, action) => {\n      return { ...state, strategyCategory: [...action.payload] };\n    },\n    addStrategyStatus: (state, action) => {\n      return { ...state, strategyStatus: [...action.payload] };\n    },\n    addStrategyTier: (state, action) => {\n      return { ...state, strategyTier: [...action.payload] };\n    },\n    addStrategyReference: (state, action) => {\n      return { ...state, strategyReference: [...action.payload] };\n    },\n    addStrategyStudent: (state, action) => {\n      return { ...state, strategyStudent: [...action.payload] };\n    },\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeeded\";\n    },\n    [getStrategies.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n  },\n});\n\nexport const {\n  addStrategyCategory,\n  addStrategyReference,\n  addStrategyStatus,\n  addStrategyTier,\n  addStrategyStudent,\n} = strategySlice.actions;\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}