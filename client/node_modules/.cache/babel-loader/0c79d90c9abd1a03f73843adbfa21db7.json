{"ast":null,"code":"import { configureStore, createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { abenaApi } from '../services/api'; // import {configureStore} from '@reduxjs/toolkit';\n// import { strategySlice } from './strategySlice';\n// createAsyncThunk accepts three parameters: a string action type value, a payloadCreator callback, and an options object.\n// For example, a type argument of 'users/requestStatus' will generate these action types:\n// pending: 'users/requestStatus/pending'\n// fulfilled: 'users/requestStatus/fulfilled'\n// rejected: 'users/requestStatus/rejected'\n\nconst fetchUserById = createAsyncThunk('users/fetchUserById', async (id, thunkAPI) => {\n  const response = await abenaApi.get(`/users/${id}`);\n  return response.data;\n});\nconst fetchStrategyByStatus = createAsyncThunk('strategy/fetchStrategyByStatus', async (status, thunkAPI) => {\n  const response = await abenaApi.get(`/strategies/${id}`);\n  return response.data;\n});\nconst submitReqStrategy = createAsyncThunk('strategy/submitReqStrategy', async (requestStrategy, thunkAPI) => {\n  const response = await abenaApi.post(`/strategies`);\n  return response.data;\n});\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    entities: [],\n    loading: 'idle'\n  },\n  reducers: {// standard reducer logic, with auto-generated action types per reducer\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.entities.push(action.payload);\n    });\n  }\n});\nconst strategySlice = createSlice({\n  name: 'strategy',\n  initialState: {\n    entities: ['not reviewed'],\n    loading: 'idle'\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchStrategyByStatus.fullfilled, (state, action) => {\n      state.entities.push(action.payload);\n    });\n  }\n}); // Later, dispatch the thunk as needed in the app\n\ndispatch(fetchUserById(123));\nexport const store = configureStore({\n  reducer: {\n    strategySlice: strategySlice\n  }\n});","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/services/store.js"],"names":["configureStore","createAsyncThunk","createSlice","abenaApi","fetchUserById","id","thunkAPI","response","get","data","fetchStrategyByStatus","status","submitReqStrategy","requestStrategy","post","usersSlice","name","initialState","entities","loading","reducers","extraReducers","builder","addCase","fulfilled","state","action","push","payload","strategySlice","fullfilled","dispatch","store","reducer"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,gBAAzB,EAA4CC,WAA5C,QAA8D,kBAA9D;AACA,SAAQC,QAAR,QAAuB,iBAAvB,C,CAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAGH,gBAAgB,CAClC,qBADkC,EAElC,OAAOI,EAAP,EAAWC,QAAX,KAAwB;AACpB,QAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,GAAT,CAAc,UAASH,EAAG,EAA1B,CAAvB;AACA,SAAOE,QAAQ,CAACE,IAAhB;AACH,CALiC,CAAtC;AAQA,MAAMC,qBAAqB,GAAGT,gBAAgB,CAC1C,gCAD0C,EAE1C,OAAOU,MAAP,EAAeL,QAAf,KAA4B;AACxB,QAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,GAAT,CAAc,eAAcH,EAAG,EAA/B,CAAvB;AACA,SAAOE,QAAQ,CAACE,IAAhB;AACH,CALyC,CAA9C;AAQA,MAAMG,iBAAiB,GAAGX,gBAAgB,CACtC,4BADsC,EAEtC,OAAMY,eAAN,EAAuBP,QAAvB,KAAmC;AAC/B,QAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACW,IAAT,CAAe,aAAf,CAAvB;AACA,SAAOP,QAAQ,CAACE,IAAhB;AACH,CALqC,CAA1C;AASA,MAAMM,UAAU,GAAGb,WAAW,CAAC;AAC3Bc,EAAAA,IAAI,EAAE,OADqB;AAE3BC,EAAAA,YAAY,EAAE;AAACC,IAAAA,QAAQ,EAAC,EAAV;AAAcC,IAAAA,OAAO,EAAE;AAAvB,GAFa;AAG3BC,EAAAA,QAAQ,EAAE,CACN;AADM,GAHiB;AAM3BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxB;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,aAAa,CAACoB,SAA9B,EAAyC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1D;AACAD,MAAAA,KAAK,CAACP,QAAN,CAAeS,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACD,KAHD;AAID;AAZwB,CAAD,CAA9B;AAiBA,MAAMC,aAAa,GAAG3B,WAAW,CAAC;AAC9Bc,EAAAA,IAAI,EAAE,UADwB;AAE9BC,EAAAA,YAAY,EAAE;AAACC,IAAAA,QAAQ,EAAE,CAAC,cAAD,CAAX;AAA6BC,IAAAA,OAAO,EAAC;AAArC,GAFgB;AAG9BC,EAAAA,QAAQ,EAAE,EAHoB;AAM9BC,EAAAA,aAAa,EAAGC,OAAD,IAAY;AACvBA,IAAAA,OAAO,CAACC,OAAR,CAAgBb,qBAAqB,CAACoB,UAAtC,EAAkD,CAACL,KAAD,EAAOC,MAAP,KAAiB;AAC/DD,MAAAA,KAAK,CAACP,QAAN,CAAeS,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACH,KAFD;AAGH;AAV6B,CAAD,CAAjC,C,CAgBA;;AACAG,QAAQ,CAAC3B,aAAa,CAAC,GAAD,CAAd,CAAR;AAKA,OAAO,MAAM4B,KAAK,GAAGhC,cAAc,CAAC;AAChCiC,EAAAA,OAAO,EAAC;AACJJ,IAAAA,aAAa,EAAEA;AADX;AADwB,CAAD,CAA5B","sourcesContent":["import { configureStore, createAsyncThunk , createSlice} from '@reduxjs/toolkit';\nimport {abenaApi} from '../services/api';\n\n// import {configureStore} from '@reduxjs/toolkit';\n// import { strategySlice } from './strategySlice';\n\n// createAsyncThunk accepts three parameters: a string action type value, a payloadCreator callback, and an options object.\n// For example, a type argument of 'users/requestStatus' will generate these action types:\n\n// pending: 'users/requestStatus/pending'\n// fulfilled: 'users/requestStatus/fulfilled'\n// rejected: 'users/requestStatus/rejected'\n\nconst fetchUserById = createAsyncThunk(\n    'users/fetchUserById',\n    async (id, thunkAPI) => {\n        const response = await abenaApi.get(`/users/${id}`);\n        return response.data;\n    }\n);\n\nconst fetchStrategyByStatus = createAsyncThunk(\n    'strategy/fetchStrategyByStatus', \n    async (status, thunkAPI) => {\n        const response = await abenaApi.get(`/strategies/${id}`);\n        return response.data;\n    }\n)\n\nconst submitReqStrategy = createAsyncThunk(\n    'strategy/submitReqStrategy',\n    async(requestStrategy, thunkAPI)=> {\n        const response = await abenaApi.post(`/strategies`);\n        return response.data;\n    }\n\n)\n\nconst usersSlice = createSlice({\n    name: 'users',\n    initialState: {entities:[], loading: 'idle'},\n    reducers: {\n        // standard reducer logic, with auto-generated action types per reducer\n    },\n    extraReducers: (builder) => {\n        // Add reducers for additional action types here, and handle loading state as needed\n        builder.addCase(fetchUserById.fulfilled, (state, action) => {\n          // Add user to the state array\n          state.entities.push(action.payload)\n        })\n      },\n\n\n})\n\nconst strategySlice = createSlice({\n    name: 'strategy',\n    initialState: {entities: ['not reviewed'], loading:'idle'},\n    reducers: {\n\n    },\n    extraReducers: (builder) =>{\n        builder.addCase(fetchStrategyByStatus.fullfilled, (state,action) =>{\n            state.entities.push(action.payload)\n        })\n    }\n\n})\n\n\n\n// Later, dispatch the thunk as needed in the app\ndispatch(fetchUserById(123))\n\n\n\n\nexport const store = configureStore({\n    reducer:{\n        strategySlice: strategySlice\n        \n    }\n})"]},"metadata":{},"sourceType":"module"}