{"ast":null,"code":"// import {  createAsyncThunk, createSlice } from \"redux-toolkit\";\n// // import axios from \"axios\";\n// export const getStrategies = createAsyncThunk(\n//   \"strategies/getStrategies\",\n//   async (thunkAPI) => {\n//     try {\n//       return fetch(`http://localhost:3000/api/v1/strategies`)\n//         .then((res) => res.json());\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue({ error: error.message });\n//     }\n//   }\n// );\n// // export const addStrategy = createAsyncThunk(\n// //   \"strategies/addStrategy\",\n// //   async (thunkAPI) => {\n// //     try {\n// //       return await axios\n// //         .post(`http://localhost:3000/api/v1/strategies`)\n// //         .then((res) => res.json());\n// //     } catch (error) {\n// //       return thunkAPI.rejectWithValue({ error: error.message });\n// //     }\n// //   }\n// // );\n// // export const fetchStrategyByStatus = createAsyncThunk(\n// //   'strategies/fetchStrategyByStatus',\n// //   async () => {\n// //     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n// //       res.json()\n// //     );\n// //   }\n// // )\n// // add default status to each strategy \"not reviewed\"\n// const strategySlice = createSlice({\n//   name: \"strategies\",\n//   initialState: { strategies: [], status: null },\n//   reducers: {\n//     addName: (state, action) => {\n//       return { ...state, addTitle: [...action.payload] };\n//     },\n//     addCategory: (state, action) => {\n//       return { ...state, addCategory: [...action.payload] };\n//     },\n//     addTier: (state, action) => {\n//       return { ...state, addTier: [...action.payload] };\n//     },\n//     addReference: (state, action) => {\n//       return { ...state, addReference: [...action.payload] };\n//     },\n//     addDescription: (state, action) => {\n//       return { ...state, addDescription: [...action.payload] };\n//     },\n//   },\n//   extraReducers: {\n//     [getStrategies.pending]: (state, action) => {\n//       state.status = \"loading\";\n//     },\n//     [getStrategies.fulfilled]: (state, action) => {\n//       state.strategies = action.payload;\n//       state.status = \"succeeded\";\n//     },\n//     [getStrategies.rejected]: (state, action) => {\n//       state.status = \"failed\";\n//     },\n//   },\n// });\n// export const { addName, addDescription, addReference, addCategory, addTier } =\n//   strategySlice.actions;\n// export default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["// import {  createAsyncThunk, createSlice } from \"redux-toolkit\";\n// // import axios from \"axios\";\n\n// export const getStrategies = createAsyncThunk(\n//   \"strategies/getStrategies\",\n//   async (thunkAPI) => {\n    \n//     try {\n//       return fetch(`http://localhost:3000/api/v1/strategies`)\n//         .then((res) => res.json());\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue({ error: error.message });\n//     }\n//   }\n// );\n\n// // export const addStrategy = createAsyncThunk(\n// //   \"strategies/addStrategy\",\n// //   async (thunkAPI) => {\n// //     try {\n// //       return await axios\n// //         .post(`http://localhost:3000/api/v1/strategies`)\n// //         .then((res) => res.json());\n// //     } catch (error) {\n// //       return thunkAPI.rejectWithValue({ error: error.message });\n// //     }\n// //   }\n// // );\n\n// // export const fetchStrategyByStatus = createAsyncThunk(\n// //   'strategies/fetchStrategyByStatus',\n// //   async () => {\n// //     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n// //       res.json()\n// //     );\n// //   }\n// // )\n\n// // add default status to each strategy \"not reviewed\"\n\n// const strategySlice = createSlice({\n//   name: \"strategies\",\n//   initialState: { strategies: [], status: null },\n//   reducers: {\n//     addName: (state, action) => {\n//       return { ...state, addTitle: [...action.payload] };\n//     },\n//     addCategory: (state, action) => {\n//       return { ...state, addCategory: [...action.payload] };\n//     },\n//     addTier: (state, action) => {\n//       return { ...state, addTier: [...action.payload] };\n//     },\n//     addReference: (state, action) => {\n//       return { ...state, addReference: [...action.payload] };\n//     },\n//     addDescription: (state, action) => {\n//       return { ...state, addDescription: [...action.payload] };\n//     },\n//   },\n//   extraReducers: {\n//     [getStrategies.pending]: (state, action) => {\n//       state.status = \"loading\";\n//     },\n//     [getStrategies.fulfilled]: (state, action) => {\n//       state.strategies = action.payload;\n//       state.status = \"succeeded\";\n//     },\n//     [getStrategies.rejected]: (state, action) => {\n//       state.status = \"failed\";\n//     },\n//   },\n// });\n\n// export const { addName, addDescription, addReference, addCategory, addTier } =\n//   strategySlice.actions;\n\n// export default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}