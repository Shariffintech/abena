{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"redux-toolkit\";\nexport const getStrategies = createAsyncThunk(\"strategies/getStrategies\", async thunkAPI => {\n  try {\n    return await fetch(`http://localhost:3000/api/v1/strategies`).then(res => res.json());\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // export const addStrategy = createAsyncThunk(\n//   \"strategies/addStrategy\",\n//   async (thunkAPI) => {\n//     try {\n//       return await axios\n//         .post(`http://localhost:3000/api/v1/strategies`)\n//         .then((res) => res.json());\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue({ error: error.message });\n//     }\n//   }\n// );\n// export const fetchStrategyByStatus = createAsyncThunk(\n//   'strategies/fetchStrategyByStatus',\n//   async () => {\n//     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n//       res.json()\n//     );\n//   }\n// )\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: {\n    strategies: [],\n    status: null\n  },\n  reducers: {\n    addName: (state, action) => {\n      return { ...state,\n        addTitle: [...action.payload]\n      };\n    },\n    addCategory: (state, action) => {\n      return { ...state,\n        addCategory: [...action.payload]\n      };\n    },\n    addTier: (state, action) => {\n      return { ...state,\n        addTier: [...action.payload]\n      };\n    },\n    addReference: (state, action) => {\n      return { ...state,\n        addReference: [...action.payload]\n      };\n    },\n    addDescription: (state, action) => {\n      return { ...state,\n        addDescription: [...action.payload]\n      };\n    }\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeeded\";\n    },\n    [getStrategies.rejected]: (state, action) => {\n      state.status = \"failed\";\n    }\n  }\n});\nexport const {\n  addName,\n  addDescription,\n  addReference,\n  addCategory,\n  addTier\n} = strategySlice.actions;\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["createAsyncThunk","createSlice","getStrategies","thunkAPI","fetch","then","res","json","error","rejectWithValue","message","strategySlice","name","initialState","strategies","status","reducers","addName","state","action","addTitle","payload","addCategory","addTier","addReference","addDescription","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"AAAA,SAAUA,gBAAV,EAA4BC,WAA5B,QAA+C,eAA/C;AAGA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAC3C,0BAD2C,EAE3C,MAAOG,QAAP,IAAoB;AAClB,MAAI;AACF,WAAO,MACLC,KAAK,CAAE,yCAAF,CAAL,CACCC,IADD,CACOC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADf,CADF;AAGD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACd,WAAOL,QAAQ,CAACM,eAAT,CAAyB;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,KAAzB,CAAP;AACD;AACF,CAV0C,CAAtC,C,CAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,aAAa,GAAGV,WAAW,CAAC;AAChCW,EAAAA,IAAI,EAAE,YAD0B;AAEhCC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,UAAU,EAAE,EAAd;AAAkBC,IAAAA,MAAM,EAAE;AAA1B,GAFkB;AAGhCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B,aAAO,EAAE,GAAGD,KAAL;AAAYE,QAAAA,QAAQ,EAAE,CAAC,GAAGD,MAAM,CAACE,OAAX;AAAtB,OAAP;AACD,KAHO;AAIRC,IAAAA,WAAW,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC9B,aAAO,EAAE,GAAGD,KAAL;AAAYI,QAAAA,WAAW,EAAE,CAAC,GAAGH,MAAM,CAACE,OAAX;AAAzB,OAAP;AACD,KANO;AAORE,IAAAA,OAAO,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC1B,aAAO,EAAE,GAAGD,KAAL;AAAYK,QAAAA,OAAO,EAAE,CAAC,GAAGJ,MAAM,CAACE,OAAX;AAArB,OAAP;AACD,KATO;AAURG,IAAAA,YAAY,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC/B,aAAO,EAAE,GAAGD,KAAL;AAAYM,QAAAA,YAAY,EAAE,CAAC,GAAGL,MAAM,CAACE,OAAX;AAA1B,OAAP;AACD,KAZO;AAaRI,IAAAA,cAAc,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACjC,aAAO,EAAE,GAAGD,KAAL;AAAYO,QAAAA,cAAc,EAAE,CAAC,GAAGN,MAAM,CAACE,OAAX;AAA5B,OAAP;AACD;AAfO,GAHsB;AAoBhCK,EAAAA,aAAa,EAAE;AACb,KAACxB,aAAa,CAACyB,OAAf,GAAyB,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,MAAAA,KAAK,CAACH,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACb,aAAa,CAAC0B,SAAf,GAA2B,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACJ,UAAN,GAAmBK,MAAM,CAACE,OAA1B;AACAH,MAAAA,KAAK,CAACH,MAAN,GAAe,WAAf;AACD,KAPY;AAQb,KAACb,aAAa,CAAC2B,QAAf,GAA0B,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACH,MAAN,GAAe,QAAf;AACD;AAVY;AApBiB,CAAD,CAAjC;AAkCA,OAAO,MAAM;AAAEE,EAAAA,OAAF;AAAWQ,EAAAA,cAAX;AAA2BD,EAAAA,YAA3B;AAAyCF,EAAAA,WAAzC;AAAsDC,EAAAA;AAAtD,IACXZ,aAAa,CAACmB,OADT;AAGP,eAAenB,aAAa,CAACoB,OAA7B","sourcesContent":["import {  createAsyncThunk, createSlice } from \"redux-toolkit\";\n\n\nexport const getStrategies = createAsyncThunk(\n  \"strategies/getStrategies\",\n  async (thunkAPI) => {\n    try {\n      return await \n        fetch(`http://localhost:3000/api/v1/strategies`)\n        .then((res) => res.json());\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\n// export const addStrategy = createAsyncThunk(\n//   \"strategies/addStrategy\",\n//   async (thunkAPI) => {\n//     try {\n//       return await axios\n//         .post(`http://localhost:3000/api/v1/strategies`)\n//         .then((res) => res.json());\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue({ error: error.message });\n//     }\n//   }\n// );\n\n// export const fetchStrategyByStatus = createAsyncThunk(\n//   'strategies/fetchStrategyByStatus',\n//   async () => {\n//     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n//       res.json()\n//     );\n//   }\n// )\n\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: { strategies: [], status: null },\n  reducers: {\n    addName: (state, action) => {\n      return { ...state, addTitle: [...action.payload] };\n    },\n    addCategory: (state, action) => {\n      return { ...state, addCategory: [...action.payload] };\n    },\n    addTier: (state, action) => {\n      return { ...state, addTier: [...action.payload] };\n    },\n    addReference: (state, action) => {\n      return { ...state, addReference: [...action.payload] };\n    },\n    addDescription: (state, action) => {\n      return { ...state, addDescription: [...action.payload] };\n    },\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeeded\";\n    },\n    [getStrategies.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n  },\n});\n\nexport const { addName, addDescription, addReference, addCategory, addTier } =\n  strategySlice.actions;\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}