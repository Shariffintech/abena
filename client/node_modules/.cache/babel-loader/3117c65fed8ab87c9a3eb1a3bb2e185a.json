{"ast":null,"code":"var _jsxFileName = \"/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/loadStrategies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Strategy from \"./strategy\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getStrategies, postStrategies } from \"./strategySlice.js\";\nimport \"bulma/css/bulma.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Strategies = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const strategies = useSelector(state => state.strategies); // to do show strategies as animated carousels with framer\n  // to do: add counter button for did you learn something new on landing page with animation\n  // to do: when strategy is turned on it is applied to the student\n  // pull strategies from the backend api\n\n  useEffect(() => {\n    getStrategies();\n  }, []);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(postStrategies(newStrategy));\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewStrategy({ ...newStrategy,\n      [name]: value\n    });\n  };\n\n  const [newStrategy, setNewStrategy] = React.useState({\n    name: \"\",\n    description: \"\",\n    category: \"\",\n    reference: \"\",\n    status: \"\",\n    tier: \"\"\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"strategies-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Strategies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Strategy Name\",\n        value: newStrategy.name,\n        onChange: handleChange,\n        id: \"strategy-name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Strategy Description\",\n        value: newStrategy.description,\n        onChange: handleChange,\n        id: \"strategy-description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Strategy Category\",\n        value: newStrategy.category,\n        onChange: handleChange,\n        id: \"strategy-category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Strategy Reference\",\n        value: newStrategy.reference,\n        onChange: handleChange,\n        id: \"strategy-reference\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Strategy Status\",\n        value: newStrategy.status,\n        onChange: handleChange,\n        id: \"strategy-status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Strategy Tier\",\n        value: newStrategy.tier,\n        onChange: handleChange,\n        id: \"strategy-tier\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        type: \"submit\",\n        children: \"Add Strategy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"strategies-container\",\n      children: strategies.map(strategies => /*#__PURE__*/_jsxDEV(Strategy, {\n        strategy: strategies\n      }, strategies.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}; // const dispatch = useDispatch();\n//   useEffect(() => {\n//     dispatch(getStrategies());\n//   }, [dispatch]);\n//   console.log(strategies);\n//   return (\n//     <section>\n//       {strategies.map((props) => (\n//         <Strategy\n//           name={props.name}\n//           description={props.description}\n//           tier={props.tier}\n//           category={props.category}\n//           reference={props.reference}\n//           createdAt={props.createdAt}\n//           id={props.id}\n//         />\n//       ))}\n//     </section>\n//   );\n// }\n\n\n_s(Strategies, \"qRJ6fhfxKCx8mZtkogErhmEM3P8=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Strategies;\nexport default Strategies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Strategies\");","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/loadStrategies.js"],"names":["React","useEffect","useState","Strategy","useSelector","useDispatch","getStrategies","postStrategies","Strategies","isLoading","setIsLoading","strategies","state","dispatch","handleSubmit","e","preventDefault","newStrategy","handleChange","name","value","target","setNewStrategy","description","category","reference","status","tier","map","id"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport Strategy from \"./strategy\";\nimport { useSelector , useDispatch } from 'react-redux';\nimport{ getStrategies, postStrategies } from \"./strategySlice.js\";\nimport \"bulma/css/bulma.min.css\";\n\n\nconst Strategies = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const strategies = useSelector(state => state.strategies);\n\n  // to do show strategies as animated carousels with framer\n  // to do: add counter button for did you learn something new on landing page with animation\n  // to do: when strategy is turned on it is applied to the student\n\n// pull strategies from the backend api\n  useEffect(() => {\n    getStrategies();\n  }\n  , []);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(postStrategies(newStrategy));\n  }\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setNewStrategy({ ...newStrategy, [name]: value });\n  }\n\n  const [newStrategy, setNewStrategy] = React.useState({\n    name: \"\",\n    description: \"\",\n    category: \"\",\n    reference: \"\",\n    status: \"\",\n    tier: \"\",\n  });\n\n  return (\n    <div className=\"strategies-container\">\n      <h1>Strategies</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Strategy Name\"\n          value={newStrategy.name}\n          onChange={handleChange}\n          id=\"strategy-name\"\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Strategy Description\"\n          value={newStrategy.description}\n          onChange={handleChange}\n          id=\"strategy-description\"\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Strategy Category\"\n          value={newStrategy.category}\n          onChange={handleChange}\n          id=\"strategy-category\"\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Strategy Reference\"\n          value={newStrategy.reference}\n          onChange={handleChange}\n          id=\"strategy-reference\"\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Strategy Status\"\n          value={newStrategy.status}\n          onChange={handleChange}\n          id=\"strategy-status\"\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Strategy Tier\"\n          value={newStrategy.tier}\n          onChange={handleChange}\n          id=\"strategy-tier\"\n        />\n        <button className=\"btn btn-primary\" type=\"submit\">\n          Add Strategy\n        </button>\n      </form>\n      <div className=\"strategies-container\">\n        {strategies.map(strategies => (\n          <Strategy key={strategies.id} strategy={strategies} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\n\n// const dispatch = useDispatch();\n//   useEffect(() => {\n//     dispatch(getStrategies());\n//   }, [dispatch]);\n\n//   console.log(strategies);\n//   return (\n//     <section>\n//       {strategies.map((props) => (\n//         <Strategy\n//           name={props.name}\n//           description={props.description}\n//           tier={props.tier}\n//           category={props.category}\n//           reference={props.reference}\n//           createdAt={props.createdAt}\n//           id={props.id}\n//         />\n//       ))}\n//     </section>\n//   );\n// }\n\n\nexport default Strategies;"]},"metadata":{},"sourceType":"module"}