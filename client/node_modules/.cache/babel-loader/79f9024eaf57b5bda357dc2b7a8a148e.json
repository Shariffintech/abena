{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  strategies: [],\n  loading: false\n};\nexport const getStrategies = createAsyncThunk('strategies/getStrategies', async () => {\n  return fetch('http://localhost:3001/api/v1/strategies').then(res => res.json()).then(data => {\n    setData(data);\n  }); // } catch (error) {\n  //   return thunkAPI.rejectWithValue({ error: error.message });\n  // }\n});\nexport const addStrategy = createAsyncThunk(\"strategies/addStrategy\", async thunkAPI => {\n  try {\n    return await fetch(`http://localhost:3001/api/v1/strategies`), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }.then(res => res.json());\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: 'strategies',\n  initialState: {\n    strategies: [],\n    status: null\n  },\n  // reducers: {\n  //   addName: (state, action) => {\n  //     return { ...state, addTitle: [...action.payload] };\n  //   },\n  //   addCategory: (state, action) => {\n  //     return { ...state, addCategory: [...action.payload] };\n  //   },\n  //   addTier: (state, action) => {\n  //     return { ...state, addTier: [...action.payload] };\n  //   },\n  //   addReference: (state, action) => {\n  //     return { ...state, addReference: [...action.payload] };\n  //   },\n  //   addDescription: (state, action) => {\n  //     return { ...state, addDescription: [...action.payload] };\n  //   },\n  // },\n  extraReducers: {\n    [getStrategies.pending]: state => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeess\";\n    },\n    [getStrategies.rejected]: state => {\n      state.status = \"failed\";\n    }\n  }\n}); // export const { addName, addDescription, addReference, addCategory, addTier } =\n//   strategySlice.actions;\n\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["createSlice","createAsyncThunk","initialState","strategies","loading","getStrategies","fetch","then","res","json","data","setData","addStrategy","thunkAPI","method","headers","Accept","error","rejectWithValue","message","strategySlice","name","status","extraReducers","pending","state","fulfilled","action","payload","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAArB;AAKA,OAAO,MAAMC,aAAa,GAAGJ,gBAAgB,CAAC,0BAAD,EAA6B,YAAY;AAC9E,SAAOK,KAAK,CAAC,yCAAD,CAAL,CAAiDC,IAAjD,CAAuDC,GAAD,IAC7DA,GAAG,CAACC,IAAJ,EADO,EAGNF,IAHM,CAGAG,IAAD,IAAU;AAACC,IAAAA,OAAO,CAACD,IAAD,CAAP;AAAc,GAHxB,CAAP,CAD8E,CAKhF;AACA;AACA;AACH,CAR0C,CAAtC;AAUP,OAAO,MAAME,WAAW,GAAGX,gBAAgB,CACzC,wBADyC,EAEzC,MAAOY,QAAP,IAAoB;AAClB,MAAI;AACF,WAAO,MAAMP,KAAK,CAAE,yCAAF,CAAX,EAAuD;AAC5DQ,MAAAA,MAAM,EAAE,MADoD;AAE5DC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AAFmD,MAO3DT,IAP2D,CAOrDC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAP6C,CAA9D;AAQD,GATD,CASE,OAAOQ,KAAP,EAAc;AACd,WAAOJ,QAAQ,CAACK,eAAT,CAAyB;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,KAAzB,CAAP;AACD;AACF,CAfwC,CAApC,C,CAkBP;;AAEA,MAAMC,aAAa,GAAGpB,WAAW,CAAC;AAChCqB,EAAAA,IAAI,EAAE,YAD0B;AAEhCnB,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,EADA;AAEZmB,IAAAA,MAAM,EAAE;AAFI,GAFkB;AAMhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,aAAa,EAAE;AACb,KAAClB,aAAa,CAACmB,OAAf,GAA0BC,KAAD,IAAW;AAClCA,MAAAA,KAAK,CAACH,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACjB,aAAa,CAACqB,SAAf,GAA2B,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC5CF,MAAAA,KAAK,CAACtB,UAAN,GAAmBwB,MAAM,CAACC,OAA1B;AACAH,MAAAA,KAAK,CAACH,MAAN,GAAe,UAAf;AACD,KAPY;AAQb,KAACjB,aAAa,CAACwB,QAAf,GAA2BJ,KAAD,IAAW;AACnCA,MAAAA,KAAK,CAACH,MAAN,GAAe,QAAf;AACD;AAVY;AAvBiB,CAAD,CAAjC,C,CAqCA;AACA;;AAEA,eAAeF,aAAa,CAACU,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n    strategies: [],\n    loading: false,\n};\n\nexport const getStrategies = createAsyncThunk('strategies/getStrategies', async () => {\n        return fetch('http://localhost:3001/api/v1/strategies').then((res) => \n        res.json()\n         )\n        .then((data) => {setData(data)});\n      // } catch (error) {\n      //   return thunkAPI.rejectWithValue({ error: error.message });\n      // }\n  });\n\nexport const addStrategy = createAsyncThunk(\n  \"strategies/addStrategy\",\n  async (thunkAPI) => {\n    try {\n      return await fetch(`http://localhost:3001/api/v1/strategies`),{\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      }\n        .then((res) => res.json());\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: 'strategies',\n  initialState: { \n    strategies: [], \n    status: null \n  },\n  // reducers: {\n  //   addName: (state, action) => {\n  //     return { ...state, addTitle: [...action.payload] };\n  //   },\n  //   addCategory: (state, action) => {\n  //     return { ...state, addCategory: [...action.payload] };\n  //   },\n  //   addTier: (state, action) => {\n  //     return { ...state, addTier: [...action.payload] };\n  //   },\n  //   addReference: (state, action) => {\n  //     return { ...state, addReference: [...action.payload] };\n  //   },\n  //   addDescription: (state, action) => {\n  //     return { ...state, addDescription: [...action.payload] };\n  //   },\n  // },\n  extraReducers: {\n    [getStrategies.pending]: (state) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeess\";\n    },\n    [getStrategies.rejected]: (state) => {\n      state.status = \"failed\";\n    },\n  },\n});\n\n// export const { addName, addDescription, addReference, addCategory, addTier } =\n//   strategySlice.actions;\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}