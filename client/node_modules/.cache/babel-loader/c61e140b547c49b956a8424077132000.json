{"ast":null,"code":"import React, { useState } from \"react\";\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; // import {api} from '../services/api';\n\nconst initialState = {\n  strategies: [],\n  loading: false\n};\nconst [isLoading, setIsLoading] = useState(false);\nconst [loadedMeetups, setLoadedMeetups] = useState([]);\nexport const getStrategies = createAsyncThunk(\"strategies/getStrategies\", async thunkAPI => {\n  try {\n    return fetch(`http://localhost:3001/api/v1/strategies`).then(res => {\n      return res.json();\n    }).then(data => {\n      const strategies = [];\n\n      for (const key in data) {\n        const strategy = {\n          id: key,\n          ...data[key]\n        };\n        strategies.push(strategy);\n      }\n\n      setIsLoading(false);\n      setLodedStrategies(strategies);\n    });\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n});\nexport const addStrategy = createAsyncThunk(\"strategies/addStrategy\", async thunkAPI => {\n  try {\n    return await axios.post(`http://localhost:3000/api/v1/strategies`).then(res => res.json());\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n});\nexport const postStrategies = createAsyncThunk(\"strategies/postStrategies\", async thunkAPI => {\n  try {\n    return await fetch(`http://localhost:3001/api/v1/strategies`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(thunkAPI.payload)\n    }).then(res => res.json());\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // export const fetchStrategyByStatus = createAsyncThunk(\n//   'strategies/fetchStrategyByStatus',\n//   async () => {\n//     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n//       res.json()\n//     );\n//   }\n// )\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: {\n    strategies: [],\n    status: null\n  },\n  reducers: {\n    addName: (state, action) => {\n      return { ...state,\n        addTitle: [...action.payload]\n      };\n    },\n    addCategory: (state, action) => {\n      return { ...state,\n        addCategory: [...action.payload]\n      };\n    },\n    addTier: (state, action) => {\n      return { ...state,\n        addTier: [...action.payload]\n      };\n    },\n    addReference: (state, action) => {\n      return { ...state,\n        addReference: [...action.payload]\n      };\n    },\n    addDescription: (state, action) => {\n      return { ...state,\n        addDescription: [...action.payload]\n      };\n    }\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeeded\";\n    },\n    [getStrategies.rejected]: (state, action) => {\n      state.status = \"failed\";\n    }\n  }\n});\nexport const {\n  addName,\n  addDescription,\n  addReference,\n  addCategory,\n  addTier\n} = strategySlice.actions;\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["React","useState","createSlice","createAsyncThunk","initialState","strategies","loading","isLoading","setIsLoading","loadedMeetups","setLoadedMeetups","getStrategies","thunkAPI","fetch","then","res","json","data","key","strategy","id","push","setLodedStrategies","error","rejectWithValue","message","addStrategy","axios","post","postStrategies","method","headers","Accept","body","JSON","stringify","payload","strategySlice","name","status","reducers","addName","state","action","addTitle","addCategory","addTier","addReference","addDescription","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import React, {useState}  from \"react\";\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import {api} from '../services/api';\n\nconst initialState = {\n    strategies: [],\n    loading: false,\n};\n\nconst [isLoading, setIsLoading] = useState(false);\nconst [loadedMeetups, setLoadedMeetups] = useState([]);\n\n\nexport const getStrategies = createAsyncThunk(\n  \"strategies/getStrategies\",\n  async (thunkAPI) => {\n      try {\n        return fetch(`http://localhost:3001/api/v1/strategies`)\n          .then((res) => {\n            return res.json();\n          })\n          .then( (data) =>  {\n            const strategies = [];\n            for(const key in data) {\n             const strategy = {\n                id: key, \n                ...data[key],\n              }\n              strategies.push(strategy);\n             }\n\n             setIsLoading(false);\n             setLodedStrategies(strategies);\n          });\n        \n      } catch (error) {\n        return thunkAPI.rejectWithValue({ error: error.message });\n      }\n  }\n);\n\nexport const addStrategy = createAsyncThunk(\n  \"strategies/addStrategy\",\n  async (thunkAPI) => {\n    try {\n      return await axios\n        .post(`http://localhost:3000/api/v1/strategies`)\n        .then((res) => res.json());\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\nexport const postStrategies = createAsyncThunk(\n  \"strategies/postStrategies\",\n  async (thunkAPI) => {\n    try {\n      return await fetch(`http://localhost:3001/api/v1/strategies`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify(thunkAPI.payload),\n      }).then((res) => res.json());\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\n// export const fetchStrategyByStatus = createAsyncThunk(\n//   'strategies/fetchStrategyByStatus',\n//   async () => {\n//     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n//       res.json()\n//     );\n//   }\n// )\n\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: { strategies: [], status: null },\n  reducers: {\n    addName: (state, action) => {\n      return { ...state, addTitle: [...action.payload] };\n    },\n    addCategory: (state, action) => {\n      return { ...state, addCategory: [...action.payload] };\n    },\n    addTier: (state, action) => {\n      return { ...state, addTier: [...action.payload] };\n    },\n    addReference: (state, action) => {\n      return { ...state, addReference: [...action.payload] };\n    },\n    addDescription: (state, action) => {\n      return { ...state, addDescription: [...action.payload] };\n    },\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeeded\";\n    },\n    [getStrategies.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n  },\n});\n\nexport const { addName, addDescription, addReference, addCategory, addTier } =\n  strategySlice.actions;\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}