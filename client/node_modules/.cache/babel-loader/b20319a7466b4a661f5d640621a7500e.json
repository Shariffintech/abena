{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const abenaApi = createApi({\n  reducerPath: 'abenaApi',\n  baseQuery: fetchBaseQuery({\n    baseURL: 'http://localhost:3000/api/v1'\n  }),\n  endpoints: {\n    getStudents: {\n      url: '/students',\n      method: 'get',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    },\n    getStrategies: {\n      url: '/strategies',\n      method: 'get',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    },\n    getStudent: {\n      url: '/students/:id',\n      method: 'get',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    },\n    getStrategy: {\n      url: '/strategies/:id',\n      method: 'get',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    },\n    createStudent: {\n      url: '/students',\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    },\n    createStrategy: {\n      url: '/strategies',\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    },\n    updateStudent: {\n      url: '/students/:id',\n      method: 'put',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    },\n    updateStrategy: {\n      url: '/strategies/:id',\n      method: 'put',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    },\n    deleteStudent: {\n      url: '/students/:id',\n      method: 'delete',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    },\n    deleteStrategy: {\n      url: '/strategies/:id',\n      method: 'delete',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    } // endpoints:(builder) => ({\n    //     getStrategyById: builder.query <Strategy, string> ({\n    //         query: (id) => `strategy/${id}`,\n    //     }),\n    // }),\n\n  }\n});","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/services/api.js"],"names":["createApi","fetchBaseQuery","abenaApi","reducerPath","baseQuery","baseURL","endpoints","getStudents","url","method","headers","getStrategies","getStudent","getStrategy","createStudent","createStrategy","updateStudent","updateStrategy","deleteStudent","deleteStrategy"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAEA,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;AAE9BG,EAAAA,WAAW,EAAE,UAFiB;AAG9BC,EAAAA,SAAS,EAAEH,cAAc,CAAC;AAACI,IAAAA,OAAO,EAAE;AAAV,GAAD,CAHK;AAI9BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,WAAW,EAAE;AACTC,MAAAA,GAAG,EAAE,WADI;AAETC,MAAAA,MAAM,EAAE,KAFC;AAGTC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHA,KADN;AAQPC,IAAAA,aAAa,EAAE;AACXH,MAAAA,GAAG,EAAE,aADM;AAEXC,MAAAA,MAAM,EAAE,KAFG;AAGXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHE,KARR;AAgBPE,IAAAA,UAAU,EAAE;AACRJ,MAAAA,GAAG,EAAE,eADG;AAERC,MAAAA,MAAM,EAAE,KAFA;AAGRC,MAAAA,OAAO,EAAE;AAEL,wBAAgB;AAFX;AAHD,KAhBL;AAwBPG,IAAAA,WAAW,EAAE;AACTL,MAAAA,GAAG,EAAE,iBADI;AAETC,MAAAA,MAAM,EAAE,KAFC;AAGTC,MAAAA,OAAO,EAAE;AAEL,wBAAgB;AAFX;AAHA,KAxBN;AAgCPI,IAAAA,aAAa,EAAE;AACXN,MAAAA,GAAG,EAAE,WADM;AAEXC,MAAAA,MAAM,EAAE,MAFG;AAGXC,MAAAA,OAAO,EAAE;AAEL,wBAAgB;AAFX;AAHE,KAhCR;AAyCPK,IAAAA,cAAc,EAAE;AACZP,MAAAA,GAAG,EAAE,aADO;AAEZC,MAAAA,MAAM,EAAE,MAFI;AAGZC,MAAAA,OAAO,EAAE;AAEL,wBAAgB;AAFX;AAHG,KAzCT;AAkDPM,IAAAA,aAAa,EAAE;AACXR,MAAAA,GAAG,EAAE,eADM;AAEXC,MAAAA,MAAM,EAAE,KAFG;AAGXC,MAAAA,OAAO,EAAE;AAEL,wBAAgB;AAFX;AAHE,KAlDR;AA2DPO,IAAAA,cAAc,EAAE;AACZT,MAAAA,GAAG,EAAE,iBADO;AAEZC,MAAAA,MAAM,EAAE,KAFI;AAGZC,MAAAA,OAAO,EAAE;AAEL,wBAAgB;AAFX;AAHG,KA3DT;AAoEPQ,IAAAA,aAAa,EAAE;AACXV,MAAAA,GAAG,EAAE,eADM;AAEXC,MAAAA,MAAM,EAAE,QAFG;AAGXC,MAAAA,OAAO,EAAE;AAEL,wBAAgB;AAFX;AAHE,KApER;AA6EPS,IAAAA,cAAc,EAAE;AACZX,MAAAA,GAAG,EAAE,iBADO;AAEZC,MAAAA,MAAM,EAAE,QAFI;AAIZC,MAAAA,OAAO,EAAE;AAEL,wBAAgB;AAFX;AAJG,KA7ET,CAuFX;AACA;AACA;AACA;AACA;;AA3FW;AAJmB,CAAD,CAA1B","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const abenaApi = createApi({\n\n    reducerPath: 'abenaApi',\n    baseQuery: fetchBaseQuery({baseURL: 'http://localhost:3000/api/v1'}),\n    endpoints: {\n        getStudents: {\n            url: '/students',\n            method: 'get',\n            headers: {\n                'Content-Type': 'application/json'\n            } \n        },\n        getStrategies: {\n            url: '/strategies',\n            method: 'get',\n            headers: {\n                'Content-Type': 'application/json'\n\n            }\n        },\n        getStudent: {\n            url: '/students/:id',\n            method: 'get',\n            headers: {\n\n                'Content-Type': 'application/json'\n            }\n        },\n        getStrategy: {\n            url: '/strategies/:id',\n            method: 'get',\n            headers: {\n                \n                'Content-Type': 'application/json'\n        }\n    },\n        createStudent: {\n            url: '/students',\n            method: 'post',\n            headers: {\n\n                'Content-Type': 'application/json'\n            }\n        },\n\n        createStrategy: {\n            url: '/strategies',\n            method: 'post',\n            headers: {\n\n                'Content-Type': 'application/json'\n            }\n        },\n\n        updateStudent: {\n            url: '/students/:id',\n            method: 'put',\n            headers: {\n\n                'Content-Type': 'application/json'\n            }\n        },\n\n        updateStrategy: {\n            url: '/strategies/:id',\n            method: 'put',\n            headers: {\n            \n                'Content-Type': 'application/json'\n            }\n        },\n\n        deleteStudent: {\n            url: '/students/:id',\n            method: 'delete',\n            headers: {\n            \n                'Content-Type': 'application/json'\n            }\n        },\n\n        deleteStrategy: {\n            url: '/strategies/:id',\n            method: 'delete',\n\n            headers: {\n\n                'Content-Type': 'application/json'\n            }\n        }\n        \n    // endpoints:(builder) => ({\n    //     getStrategyById: builder.query <Strategy, string> ({\n    //         query: (id) => `strategy/${id}`,\n    //     }),\n    // }),\n\n\n}})\n\n"]},"metadata":{},"sourceType":"module"}