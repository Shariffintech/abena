{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"redux-toolkit\";\nexport const getStrategies = createAsyncThunk(\"strategies/getStrategies\", async () => {\n  return await fetch(`http://localhost:3000/api/v1/strategies`).then(res => res.json());\n}); // export const fetchStrategyByStatus = createAsyncThunk(\n//   'strategies/fetchStrategyByStatus',\n//   async () => {\n//     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n//       res.json()\n//     );\n//   }\n// )\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: {\n    strategies: [],\n    status: null\n  },\n  reducers: {\n    addCategory: (state, action) => {\n      return { ...state,\n        addCategory: [...action.payload]\n      };\n    },\n    addTitle: (state, action) => {\n      return { ...state,\n        addTitle: [...action.payload]\n      };\n    },\n    addTier: (state, action) => {\n      return { ...state,\n        addTier: [...action.payload]\n      };\n    },\n    addReference: (state, action) => {\n      return { ...state,\n        addReference: [...action.payload]\n      };\n    },\n    addDescription: (state, action) => {\n      return { ...state,\n        addDescription: [...action.payload]\n      };\n    }\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeeded\";\n    },\n    [getStrategies.rejected]: (state, action) => {\n      state.status = \"failed\";\n    }\n  }\n});\nexport const {\n  addStrategyCategory,\n  addStrategyReference,\n  addStrategyStatus,\n  addStrategyTier,\n  addStrategyStudent\n} = strategySlice.actions;\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["createSlice","createAsyncThunk","getStrategies","fetch","then","res","json","strategySlice","name","initialState","strategies","status","reducers","addCategory","state","action","payload","addTitle","addTier","addReference","addDescription","extraReducers","pending","fulfilled","rejected","addStrategyCategory","addStrategyReference","addStrategyStatus","addStrategyTier","addStrategyStudent","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,eAA9C;AAEA,OAAO,MAAMC,aAAa,GAAGD,gBAAgB,CAC3C,0BAD2C,EAE3C,YAAY;AACV,SAAO,MAAME,KAAK,CAAE,yCAAF,CAAL,CAAiDC,IAAjD,CAAuDC,GAAD,IACjEA,GAAG,CAACC,IAAJ,EADW,CAAb;AAGD,CAN0C,CAAtC,C,CASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAGP,WAAW,CAAC;AAChCQ,EAAAA,IAAI,EAAE,YAD0B;AAEhCC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,UAAU,EAAE,EAAd;AAAkBC,IAAAA,MAAM,EAAE;AAA1B,GAFkB;AAGhCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,aAAO,EAAE,GAAGD,KAAL;AAAYD,QAAAA,WAAW,EAAE,CAAC,GAAGE,MAAM,CAACC,OAAX;AAAzB,OAAP;AACD,KAHO;AAIRC,IAAAA,QAAQ,EAAC,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC1B,aAAO,EAAE,GAAGD,KAAL;AAAYG,QAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACC,OAAX;AAAtB,OAAP;AACD,KANO;AAORE,IAAAA,OAAO,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC1B,aAAO,EAAE,GAAGD,KAAL;AAAYI,QAAAA,OAAO,EAAE,CAAC,GAAGH,MAAM,CAACC,OAAX;AAArB,OAAP;AACD,KATO;AAURG,IAAAA,YAAY,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC/B,aAAO,EAAE,GAAGD,KAAL;AAAYK,QAAAA,YAAY,EAAE,CAAC,GAAGJ,MAAM,CAACC,OAAX;AAA1B,OAAP;AACD,KAZO;AAaRI,IAAAA,cAAc,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACjC,aAAO,EAAE,GAAGD,KAAL;AAAYM,QAAAA,cAAc,EAAE,CAAC,GAAGL,MAAM,CAACC,OAAX;AAA5B,OAAP;AACD;AAfO,GAHsB;AAoBhCK,EAAAA,aAAa,EAAE;AACb,KAACnB,aAAa,CAACoB,OAAf,GAAyB,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,MAAAA,KAAK,CAACH,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACT,aAAa,CAACqB,SAAf,GAA2B,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACJ,UAAN,GAAmBK,MAAM,CAACC,OAA1B;AACAF,MAAAA,KAAK,CAACH,MAAN,GAAe,WAAf;AACD,KAPY;AAQb,KAACT,aAAa,CAACsB,QAAf,GAA0B,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACH,MAAN,GAAe,QAAf;AACD;AAVY;AApBiB,CAAD,CAAjC;AAkCA,OAAO,MAAM;AACXc,EAAAA,mBADW;AAEXC,EAAAA,oBAFW;AAGXC,EAAAA,iBAHW;AAIXC,EAAAA,eAJW;AAKXC,EAAAA;AALW,IAMTtB,aAAa,CAACuB,OANX;AAQP,eAAevB,aAAa,CAACwB,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from \"redux-toolkit\";\n\nexport const getStrategies = createAsyncThunk(\n  \"strategies/getStrategies\",\n  async () => {\n    return await fetch(`http://localhost:3000/api/v1/strategies`).then((res) =>\n      res.json()\n    );\n  }\n);\n\n// export const fetchStrategyByStatus = createAsyncThunk(\n//   'strategies/fetchStrategyByStatus',\n//   async () => {\n//     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n//       res.json()\n//     );\n//   }\n// )\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: { strategies: [], status: null },\n  reducers: {\n    addCategory: (state, action) => {\n      return { ...state, addCategory: [...action.payload] };\n    },\n    addTitle:(state, action) => {\n      return { ...state, addTitle: [...action.payload] };\n    },\n    addTier: (state, action) => {\n      return { ...state, addTier: [...action.payload] };\n    },\n    addReference: (state, action) => {\n      return { ...state, addReference: [...action.payload] };\n    },\n    addDescription: (state, action) => {\n      return { ...state, addDescription: [...action.payload] };\n    },\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeeded\";\n    },\n    [getStrategies.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n  },\n});\n\nexport const {\n  addStrategyCategory,\n  addStrategyReference,\n  addStrategyStatus,\n  addStrategyTier,\n  addStrategyStudent,\n} = strategySlice.actions;\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}