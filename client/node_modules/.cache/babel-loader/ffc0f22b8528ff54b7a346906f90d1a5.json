{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const getStrategies = createAsyncThunk(\"strategies/getStrategies\", async thunkAPI => {\n  try {\n    const strategies = await fetch(`http://127.0.0.1:3000/api/v1/strategies`).then(res => res.json()).then(data => data);\n    return strategies;\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n});\nexport const addStrategy = createAsyncThunk(\"strategies/addStrategy\", async thunkAPI => {\n  try {\n    return await fetch(`http://127.0.0.1:3000/api/v1/strategies`), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }.then(res => res.json());\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: 'strategies',\n  initialState: {\n    strategies: [],\n    status: null\n  },\n\n  extraReducers(builder) {\n    builder.addCase(getStrategies.fulfilled, (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"success\";\n    }).addCase(getStrategies.pending, (state, action) => {\n      state.status = \"loading\";\n    }).addCase(getStrategies.rejected, (state, action) => {\n      state.status = \"failed\";\n    }).addCase(addStrategy.fulfilled, (state, action) => {\n      state.strategies.push(action.payload);\n      state.status = \"success\";\n    }); // [getStrategies.pending]: (state) => {\n    //   state.status = \"loading\";\n    // },\n    // [getStrategies.fulfilled]: (state, action) => {\n    //   state.strategies = action.payload;\n    //   state.status = \"success\";\n    // },\n    // [getStrategies.rejected]: (state) => {\n    //   state.status = \"failed\";\n    // },\n  }\n\n}); // export const selectStrategies = ({strategies}) => strategies\n\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["createSlice","createAsyncThunk","getStrategies","thunkAPI","strategies","fetch","then","res","json","data","error","rejectWithValue","message","addStrategy","method","headers","Accept","strategySlice","name","initialState","status","extraReducers","builder","addCase","fulfilled","state","action","payload","pending","rejected","push","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,aAAa,GAAGD,gBAAgB,CAC3C,0BAD2C,EAE3C,MAAOE,QAAP,IAAoB;AAClB,MAAI;AACF,UAAMC,UAAU,GAAG,MAAMC,KAAK,CAAE,yCAAF,CAAL,CACtBC,IADsB,CAChBC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADQ,EAEtBF,IAFsB,CAEhBG,IAAD,IAAUA,IAFO,CAAzB;AAGA,WAAOL,UAAP;AAED,GAND,CAME,OAAOM,KAAP,EAAc;AACd,WAAOP,QAAQ,CAACQ,eAAT,CAAyB;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,KAAzB,CAAP;AACD;AACF,CAZ0C,CAAtC;AAeP,OAAO,MAAMC,WAAW,GAAGZ,gBAAgB,CACzC,wBADyC,EAEzC,MAAOE,QAAP,IAAoB;AAClB,MAAI;AACF,WAAO,MAAME,KAAK,CAAE,yCAAF,CAAX,EAAuD;AAC5DS,MAAAA,MAAM,EAAE,MADoD;AAE5DC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AAFmD,MAO3DV,IAP2D,CAOrDC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAP6C,CAA9D;AAQD,GATD,CASE,OAAOE,KAAP,EAAc;AACd,WAAOP,QAAQ,CAACQ,eAAT,CAAyB;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,KAAzB,CAAP;AACD;AACF,CAfwC,CAApC,C,CAkBP;;AAEA,MAAMK,aAAa,GAAGjB,WAAW,CAAC;AAChCkB,EAAAA,IAAI,EAAE,YAD0B;AAEhCC,EAAAA,YAAY,EAAE;AACZf,IAAAA,UAAU,EAAE,EADA;AAEZgB,IAAAA,MAAM,EAAE;AAFI,GAFkB;;AAMhCC,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrBA,IAAAA,OAAO,CACNC,OADD,CACSrB,aAAa,CAACsB,SADvB,EACkC,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAClDD,MAAAA,KAAK,CAACrB,UAAN,GAAmBsB,MAAM,CAACC,OAA1B;AACAF,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACD,KAJD,EAKCG,OALD,CAKSrB,aAAa,CAAC0B,OALvB,EAKgC,CAACH,KAAD,EAAOC,MAAP,KAAkB;AAChDD,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACD,KAPD,EAQCG,OARD,CAQSrB,aAAa,CAAC2B,QARvB,EAQiC,CAACJ,KAAD,EAAOC,MAAP,KAAkB;AACjDD,MAAAA,KAAK,CAACL,MAAN,GAAe,QAAf;AACD,KAVD,EAWCG,OAXD,CAWSV,WAAW,CAACW,SAXrB,EAWgC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACrB,UAAN,CAAiB0B,IAAjB,CAAsBJ,MAAM,CAACC,OAA7B;AACAF,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACD,KAdD,EADqB,CAkBrB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD;;AAnC+B,CAAD,CAAjC,C,CA2CA;;AAGA,eAAeH,aAAa,CAACc,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const getStrategies = createAsyncThunk(\n  \"strategies/getStrategies\",\n  async (thunkAPI) => {\n    try {\n      const strategies = await fetch(`http://127.0.0.1:3000/api/v1/strategies`)\n        .then((res) => res.json())\n        .then((data) => data);\n      return strategies;\n     \n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\nexport const addStrategy = createAsyncThunk(\n  \"strategies/addStrategy\",\n  async (thunkAPI) => {\n    try {\n      return await fetch(`http://127.0.0.1:3000/api/v1/strategies`),{\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      }\n        .then((res) => res.json());\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: 'strategies',\n  initialState: { \n    strategies: [], \n    status: null \n  },\n  extraReducers(builder) {\n    builder\n    .addCase(getStrategies.fulfilled, (state,action) => {\n      state.strategies = action.payload;\n      state.status = \"success\";\n    })\n    .addCase(getStrategies.pending, (state,action) => {\n      state.status = \"loading\";\n    })\n    .addCase(getStrategies.rejected, (state,action) => {\n      state.status = \"failed\";\n    })\n    .addCase(addStrategy.fulfilled, (state, action) => {\n      state.strategies.push(action.payload);\n      state.status = \"success\";\n    })\n\n\n    // [getStrategies.pending]: (state) => {\n    //   state.status = \"loading\";\n    // },\n    // [getStrategies.fulfilled]: (state, action) => {\n    //   state.strategies = action.payload;\n    //   state.status = \"success\";\n\n    // },\n    // [getStrategies.rejected]: (state) => {\n    //   state.status = \"failed\";\n    // },\n  }\n\n\n  });\n\n\n\n\n// export const selectStrategies = ({strategies}) => strategies\n\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}