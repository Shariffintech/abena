{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"redux-toolkit\";\nimport axios from \"axios\";\nexport const getStrategies = createAsyncThunk(\"strategies/getStrategies\", async thunkAPI => {\n  try {\n    return await axios.get(`http://localhost:3000/api/v1/strategies`).then(res => res.json());\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // export const addStrategy = createAsyncThunk(\n//   \"strategies/addStrategy\",\n//   async (thunkAPI) => {\n//     try {\n//       return await axios\n//         .post(`http://localhost:3000/api/v1/strategies`)\n//         .then((res) => res.json());\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue({ error: error.message });\n//     }\n//   }\n// );\n// export const fetchStrategyByStatus = createAsyncThunk(\n//   'strategies/fetchStrategyByStatus',\n//   async () => {\n//     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n//       res.json()\n//     );\n//   }\n// )\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: {\n    strategies: [],\n    status: null\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeeded\";\n    },\n    [getStrategies.rejected]: (state, action) => {\n      state.status = \"failed\";\n    }\n  }\n});\nexport const {\n  addName,\n  addDescription,\n  addReference,\n  addCategory,\n  addTier\n} = strategySlice.actions;\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["createSlice","createAsyncThunk","axios","getStrategies","thunkAPI","get","then","res","json","error","rejectWithValue","message","strategySlice","name","initialState","strategies","status","extraReducers","pending","state","action","fulfilled","payload","rejected","addName","addDescription","addReference","addCategory","addTier","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,eAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAC3C,0BAD2C,EAE3C,MAAOG,QAAP,IAAoB;AAClB,MAAI;AACF,WAAO,MAAMF,KAAK,CACfG,GADU,CACL,yCADK,EAEVC,IAFU,CAEJC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAFJ,CAAb;AAGD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACd,WAAOL,QAAQ,CAACM,eAAT,CAAyB;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,KAAzB,CAAP;AACD;AACF,CAV0C,CAAtC,C,CAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,aAAa,GAAGZ,WAAW,CAAC;AAChCa,EAAAA,IAAI,EAAE,YAD0B;AAEhCC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,UAAU,EAAE,EAAd;AAAkBC,IAAAA,MAAM,EAAE;AAA1B,GAFkB;AAIhCC,EAAAA,aAAa,EAAE;AACb,KAACd,aAAa,CAACe,OAAf,GAAyB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,MAAAA,KAAK,CAACH,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACb,aAAa,CAACkB,SAAf,GAA2B,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACJ,UAAN,GAAmBK,MAAM,CAACE,OAA1B;AACAH,MAAAA,KAAK,CAACH,MAAN,GAAe,WAAf;AACD,KAPY;AAQb,KAACb,aAAa,CAACoB,QAAf,GAA0B,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACH,MAAN,GAAe,QAAf;AACD;AAVY;AAJiB,CAAD,CAAjC;AAkBA,OAAO,MAAM;AAAEQ,EAAAA,OAAF;AAAWC,EAAAA,cAAX;AAA2BC,EAAAA,YAA3B;AAAyCC,EAAAA,WAAzC;AAAsDC,EAAAA;AAAtD,IACXhB,aAAa,CAACiB,OADT;AAGP,eAAejB,aAAa,CAACkB,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from \"redux-toolkit\";\nimport axios from \"axios\";\n\nexport const getStrategies = createAsyncThunk(\n  \"strategies/getStrategies\",\n  async (thunkAPI) => {\n    try {\n      return await axios\n        .get(`http://localhost:3000/api/v1/strategies`)\n        .then((res) => res.json());\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\n// export const addStrategy = createAsyncThunk(\n//   \"strategies/addStrategy\",\n//   async (thunkAPI) => {\n//     try {\n//       return await axios\n//         .post(`http://localhost:3000/api/v1/strategies`)\n//         .then((res) => res.json());\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue({ error: error.message });\n//     }\n//   }\n// );\n\n// export const fetchStrategyByStatus = createAsyncThunk(\n//   'strategies/fetchStrategyByStatus',\n//   async () => {\n//     return await fetch(`http://localhost:3000/api/v1/strategies/status/${status}`).then((res) =>\n//       res.json()\n//     );\n//   }\n// )\n\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: { strategies: [], status: null },\n  \n  extraReducers: {\n    [getStrategies.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeeded\";\n    },\n    [getStrategies.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n  },\n});\n\nexport const { addName, addDescription, addReference, addCategory, addTier } =\n  strategySlice.actions;\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}