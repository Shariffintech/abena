{"ast":null,"code":"/* eslint-disable no-console */\n\n/**\n * @module\n * This module provides stubs for the Router API used in Handshake instead of the private Framer Router.\n * */\nimport * as React from \"react\";\nexport const ComponentWithPreload = stubbedComponent(\"ComponentWithPreload\");\nexport const RoutesProvider = stubbedComponent(\"RoutesProvider\");\nexport const Router = stubbedComponent(\"Router\");\nexport function computeRelativePath(_from, _to) {\n  return \"\";\n}\nexport function isRoute(route) {\n  return false;\n}\nexport function getPathForRoute(_route, _options) {\n  return \"/\";\n}\nexport function getRouteElementId(_route, _elementId) {\n  return undefined;\n}\nexport function useCurrentRouteId() {\n  return undefined;\n}\nexport function useRouter() {\n  return {\n    navigate(_routeId, _elementId, _pathVariables) {},\n\n    getRoute(_routeId, _pathVariables) {\n      return undefined;\n    },\n\n    currentRouteId: \"\"\n  };\n}\n/**\n * @internal\n */\n\nexport function useRouteAnchor(_routeId) {\n  let _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  return {\n    onClick: () => {},\n    href: \"#\"\n  };\n}\n/**\n * @internal\n */\n\nexport function useRouteHandler(_routeId) {\n  let _preload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  let elementId = arguments.length > 2 ? arguments[2] : undefined;\n  return () => {};\n}\nexport function useRoutePreloader(_routeIds) {\n  let _enabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  return;\n}\n/**\n * @internal\n */\n\nexport function preloadComponent(_component) {\n  return;\n}\n\nfunction stubbedComponent(componentName) {\n  return _ref => {\n    let {\n      children\n    } = _ref;\n    console.warn(`Using stubbed \\`${componentName}\\``);\n    return React.createElement(React.Fragment, null, children);\n  };\n}","map":{"version":3,"mappings":"AAAA;;AACA;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAOA,OAAO,MAAMC,oBAAoB,GAAQC,gBAAgB,CAAC,sBAAD,CAAlD;AACP,OAAO,MAAMC,cAAc,GAAQD,gBAAgB,CAAC,gBAAD,CAA5C;AACP,OAAO,MAAME,MAAM,GAAQF,gBAAgB,CAAC,QAAD,CAApC;AAEP,OAAM,SAAUG,mBAAV,CAA8BC,KAA9B,EAA6CC,GAA7C,EAAwD;AAC1D,SAAO,EAAP;AACH;AACD,OAAM,SAAUC,OAAV,CAAkBC,KAAlB,EAAgC;AAClC,SAAO,KAAP;AACH;AACD,OAAM,SAAUC,eAAV,CAA0BC,MAA1B,EAAqDC,QAArD,EAAkE;AACpE,SAAO,GAAP;AACH;AACD,OAAM,SAAUC,iBAAV,CAA4BF,MAA5B,EAA4CG,UAA5C,EAA+D;AACjE,SAAOC,SAAP;AACH;AACD,OAAM,SAAUC,iBAAV,GAA2B;AAC7B,SAAOD,SAAP;AACH;AACD,OAAM,SAAUE,SAAV,GAAmB;AACrB,SAAO;AACHC,YAAQ,CAACC,QAAD,EAAgBL,UAAhB,EAAqCM,cAArC,EAA6E,CAAI,CADtF;;AAEHC,YAAQ,CAACF,QAAD,EAAoBC,cAApB,EAA4D;AAChE,aAAOL,SAAP;AACH,KAJE;;AAKHO,kBAAc,EAAE;AALb,GAAP;AAOH;AACD;;;;AAGA,OAAM,SAAUC,cAAV,CAAyBJ,QAAzB,EAAiF;AAAA,MAArCP,QAAqC,uEAAF,EAAE;;AACnF,SAAO;AAAEY,WAAO,EAAE,MAAK,CAAG,CAAnB;AAAqBC,QAAI,EAAE;AAA3B,GAAP;AACH;AACD;;;;AAGA,OAAM,SAAUC,eAAV,CAA0BP,QAA1B,EAA0F;AAAA,MAA7CQ,QAA6C,uEAAzB,KAAyB;;AAAA,MAAlBC,SAAkB;AAC5F,SAAO,MAAK,CAAG,CAAf;AACH;AACD,OAAM,SAAUC,iBAAV,CAA4BC,SAA5B,EAA0E;AAAA,MAAxBC,QAAwB,uEAAJ,IAAI;;AAC5E;AACH;AACD;;;;AAGA,OAAM,SAAUC,gBAAV,CAA2BC,UAA3B,EAAoD;AACtD;AACH;;AACD,SAAS/B,gBAAT,CAA0BgC,aAA1B,EAA+C;AAC3C,SAAO,QAAqC;AAAA,QAApC;AAAEC;AAAF,KAAoC;AACxCC,WAAO,CAACC,IAAR,CAAa,mBAAmBH,aAAa,IAA7C;AACA,WAAOlC,0CAAGmC,QAAH,CAAP;AACH,GAHD;AAIH","names":["React","ComponentWithPreload","stubbedComponent","RoutesProvider","Router","computeRelativePath","_from","_to","isRoute","route","getPathForRoute","_route","_options","getRouteElementId","_elementId","undefined","useCurrentRouteId","useRouter","navigate","_routeId","_pathVariables","getRoute","currentRouteId","useRouteAnchor","onClick","href","useRouteHandler","_preload","elementId","useRoutePreloader","_routeIds","_enabled","preloadComponent","_component","componentName","children","console","warn"],"sources":["../../src/router/stub.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}