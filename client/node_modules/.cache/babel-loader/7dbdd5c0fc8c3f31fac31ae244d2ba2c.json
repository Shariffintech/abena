{"ast":null,"code":"import { configureStore, createAsyncThunk } from '@reduxjs/toolkit';\nimport { abenaApi } from '../services/api';\nimport { strategySlice } from '../services/slices/strategySlice';\nimport { studentSlice } from '../services/slices/studentSlice'; // createAsyncThunk accepts three parameters: a string action type value, a payloadCreator callback, and an options object.\n// For example, a type argument of 'users/requestStatus' will generate these action types:\n// pending: 'users/requestStatus/pending'\n// fulfilled: 'users/requestStatus/fulfilled'\n// rejected: 'users/requestStatus/rejected'\n\nconst fetchUserById = createAsyncThunk('users/fetchUserById', async (id, thunkAPI) => {\n  const response = await abenaApi.get(`/users/${id}`);\n  return response.data;\n});\nconst fetchStrategyByStatus = createAsyncThunk('strategy/fetchStrategyByStatus', async (status, thunkAPI) => {\n  const response = await abenaApi.get(`/strategies/${id}`);\n  return response.data;\n});\nconst submitReqStrategy = createAsyncThunk('strategy/submitReqStrategy', async (requestStrategy, thunkAPI) => {\n  const response = await abenaApi.post(`/strategies`);\n  return response.data;\n}); // Later, dispatch the thunk as needed in the app\n\ndispatch(fetchUserById(123));\nexport const store = configureStore({\n  reducer: {\n    strategySlice: strategySlice,\n    studentSlice: studentSlice\n  }\n});","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/services/store.js"],"names":["configureStore","createAsyncThunk","abenaApi","strategySlice","studentSlice","fetchUserById","id","thunkAPI","response","get","data","fetchStrategyByStatus","status","submitReqStrategy","requestStrategy","post","dispatch","store","reducer"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,gBAAzB,QAAgD,kBAAhD;AACA,SAAQC,QAAR,QAAuB,iBAAvB;AACA,SAASC,aAAT,QAA8B,kCAA9B;AACA,SAASC,YAAT,QAA6B,iCAA7B,C,CAMA;AACA;AAEA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAGJ,gBAAgB,CAClC,qBADkC,EAElC,OAAOK,EAAP,EAAWC,QAAX,KAAwB;AACpB,QAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,GAAT,CAAc,UAASH,EAAG,EAA1B,CAAvB;AACA,SAAOE,QAAQ,CAACE,IAAhB;AACH,CALiC,CAAtC;AAQA,MAAMC,qBAAqB,GAAGV,gBAAgB,CAC1C,gCAD0C,EAE1C,OAAOW,MAAP,EAAeL,QAAf,KAA4B;AACxB,QAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,GAAT,CAAc,eAAcH,EAAG,EAA/B,CAAvB;AACA,SAAOE,QAAQ,CAACE,IAAhB;AACH,CALyC,CAA9C;AAQA,MAAMG,iBAAiB,GAAGZ,gBAAgB,CACtC,4BADsC,EAEtC,OAAMa,eAAN,EAAuBP,QAAvB,KAAmC;AAC/B,QAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACa,IAAT,CAAe,aAAf,CAAvB;AACA,SAAOP,QAAQ,CAACE,IAAhB;AACH,CALqC,CAA1C,C,CAYA;;AACAM,QAAQ,CAACX,aAAa,CAAC,GAAD,CAAd,CAAR;AAKA,OAAO,MAAMY,KAAK,GAAGjB,cAAc,CAAC;AAChCkB,EAAAA,OAAO,EAAC;AACJf,IAAAA,aAAa,EAAEA,aADX;AAEJC,IAAAA,YAAY,EAAEA;AAFV;AADwB,CAAD,CAA5B","sourcesContent":["import { configureStore, createAsyncThunk} from '@reduxjs/toolkit';\nimport {abenaApi} from '../services/api';\nimport { strategySlice } from '../services/slices/strategySlice';\nimport { studentSlice } from '../services/slices/studentSlice';\n\n\n\n\n\n// createAsyncThunk accepts three parameters: a string action type value, a payloadCreator callback, and an options object.\n// For example, a type argument of 'users/requestStatus' will generate these action types:\n\n// pending: 'users/requestStatus/pending'\n// fulfilled: 'users/requestStatus/fulfilled'\n// rejected: 'users/requestStatus/rejected'\n\nconst fetchUserById = createAsyncThunk(\n    'users/fetchUserById',\n    async (id, thunkAPI) => {\n        const response = await abenaApi.get(`/users/${id}`);\n        return response.data;\n    }\n);\n\nconst fetchStrategyByStatus = createAsyncThunk(\n    'strategy/fetchStrategyByStatus', \n    async (status, thunkAPI) => {\n        const response = await abenaApi.get(`/strategies/${id}`);\n        return response.data;\n    }\n)\n\nconst submitReqStrategy = createAsyncThunk(\n    'strategy/submitReqStrategy',\n    async(requestStrategy, thunkAPI)=> {\n        const response = await abenaApi.post(`/strategies`);\n        return response.data;\n    }\n\n)\n\n\n\n\n// Later, dispatch the thunk as needed in the app\ndispatch(fetchUserById(123))\n\n\n\n\nexport const store = configureStore({\n    reducer:{\n        strategySlice: strategySlice,\n        studentSlice: studentSlice\n        \n    }\n})"]},"metadata":{},"sourceType":"module"}