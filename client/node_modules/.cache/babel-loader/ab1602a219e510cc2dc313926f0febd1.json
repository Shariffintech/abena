{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  strategies: [],\n  loading: false\n};\nexport const getStrategies = createAsyncThunk('strategies/getStrategies', async () => {\n  try {\n    return fetch('http://127.0.0.1:3000/api/v1/strategies').then(res => res.json()) // push the strategies into the strategies array\n    .then(res => {\n      return res.map(strategy => {\n        return {\n          id: strategy.id,\n          name: strategy.name,\n          description: strategy.description,\n          category: strategy.category,\n          reference: strategy.reference,\n          tier: strategy.tier\n        };\n      });\n    });\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n});\nexport const addStrategy = createAsyncThunk(\"strategies/addStrategy\", async thunkAPI => {\n  try {\n    return await fetch(`http://localhost:3001/api/v1/strategies`), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }.then(res => res.json());\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: 'strategies',\n  initialState: {\n    strategies: [],\n    status: null\n  },\n  reducers: {\n    getAll: (state, action) => {\n      return { ...state,\n        strategies: [...action.payload]\n      };\n    }\n  },\n  extraReducers: {\n    [getStrategies.pending]: state => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeess\";\n    },\n    [getStrategies.rejected]: state => {\n      state.status = \"failed\";\n    }\n  }\n});\nexport const {\n  getAll\n} = strategySlice.actions;\nexport const selectStrategies = _ref => {\n  let {\n    strategies\n  } = _ref;\n  return strategies;\n};\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["createSlice","createAsyncThunk","initialState","strategies","loading","getStrategies","fetch","then","res","json","map","strategy","id","name","description","category","reference","tier","error","thunkAPI","rejectWithValue","message","addStrategy","method","headers","Accept","strategySlice","status","reducers","getAll","state","action","payload","extraReducers","pending","fulfilled","rejected","actions","selectStrategies","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n    strategies: [],\n    loading: false,\n};\n\nexport const getStrategies = createAsyncThunk('strategies/getStrategies', async () => {\n    try {\n        return fetch('http://127.0.0.1:3000/api/v1/strategies').then((res) => \n        res.json()\n         )\n\n         // push the strategies into the strategies array\n          .then((res) => {\n            return res.map((strategy) => {\n                return {\n                    id: strategy.id,\n                    name: strategy.name,\n                    description: strategy.description,\n                    category: strategy.category,\n                    reference: strategy.reference,\n                    tier: strategy.tier,\n                };\n            }\n          )\n          })\n      \n\n      } catch (error) {\n        return thunkAPI.rejectWithValue({ error: error.message });\n      }\n\n  });\n\nexport const addStrategy = createAsyncThunk(\n  \"strategies/addStrategy\",\n  async (thunkAPI) => {\n    try {\n      return await fetch(`http://localhost:3001/api/v1/strategies`),{\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      }\n        .then((res) => res.json());\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: 'strategies',\n  initialState: { \n    strategies: [], \n    status: null \n  },\n  reducers: {\n    getAll: (state, action) => {\n      return { ...state, strategies: [...action.payload] };\n    }\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeess\";\n    },\n    [getStrategies.rejected]: (state) => {\n      state.status = \"failed\";\n    },\n  },\n});\n\nexport const { getAll } = strategySlice.actions;\n\nexport const selectStrategies = ({strategies}) => strategies\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}