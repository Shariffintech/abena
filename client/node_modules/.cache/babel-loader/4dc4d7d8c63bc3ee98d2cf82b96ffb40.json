{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  strategies: [],\n  loading: false\n};\nexport const getStrategies = createAsyncThunk('strategies/getStrategies', async () => {\n  return fetch('http://127.0.0.1:3000/api/v1/strategies').then(res => res.json()); // } catch (error) {\n  //   return thunkAPI.rejectWithValue({ error: error.message });\n  // }\n});\nexport const addStrategy = createAsyncThunk(\"strategies/addStrategy\", async thunkAPI => {\n  try {\n    return await fetch(`http://localhost:3001/api/v1/strategies`), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }.then(res => res.json());\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: 'strategies',\n  initialState: {\n    strategies: [],\n    status: null\n  },\n  reducers: {\n    // addName: (state, action) => {\n    //   return { ...state, addTitle: [...action.payload] };\n    // },\n    // addCategory: (state, action) => {\n    //   return { ...state, addCategory: [...action.payload] };\n    // },\n    // addTier: (state, action) => {\n    //   return { ...state, addTier: [...action.payload] };\n    // },\n    // addReference: (state, action) => {\n    //   return { ...state, addReference: [...action.payload] };\n    // },\n    // addDescription: (state, action) => {\n    //   return { ...state, addDescription: [...action.payload] };\n    // },\n    getAll: (state, action) => {\n      return { ...state,\n        strategies: [...action.payload]\n      };\n    }\n  },\n  extraReducers: {\n    [getStrategies.pending]: state => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeess\";\n    },\n    [getStrategies.rejected]: state => {\n      state.status = \"failed\";\n    }\n  }\n}); // export const { addName, addDescription, addReference, addCategory, addTier } =\n//   strategySlice.actions;\n\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["createSlice","createAsyncThunk","initialState","strategies","loading","getStrategies","fetch","then","res","json","addStrategy","thunkAPI","method","headers","Accept","error","rejectWithValue","message","strategySlice","name","status","reducers","getAll","state","action","payload","extraReducers","pending","fulfilled","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAArB;AAKA,OAAO,MAAMC,aAAa,GAAGJ,gBAAgB,CAAC,0BAAD,EAA6B,YAAY;AAC9E,SAAOK,KAAK,CAAC,yCAAD,CAAL,CAAiDC,IAAjD,CAAuDC,GAAD,IAC7DA,GAAG,CAACC,IAAJ,EADO,CAAP,CAD8E,CAKhF;AACA;AACA;AACH,CAR0C,CAAtC;AAUP,OAAO,MAAMC,WAAW,GAAGT,gBAAgB,CACzC,wBADyC,EAEzC,MAAOU,QAAP,IAAoB;AAClB,MAAI;AACF,WAAO,MAAML,KAAK,CAAE,yCAAF,CAAX,EAAuD;AAC5DM,MAAAA,MAAM,EAAE,MADoD;AAE5DC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AAFmD,MAO3DP,IAP2D,CAOrDC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAP6C,CAA9D;AAQD,GATD,CASE,OAAOM,KAAP,EAAc;AACd,WAAOJ,QAAQ,CAACK,eAAT,CAAyB;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,KAAzB,CAAP;AACD;AACF,CAfwC,CAApC,C,CAkBP;;AAEA,MAAMC,aAAa,GAAGlB,WAAW,CAAC;AAChCmB,EAAAA,IAAI,EAAE,YAD0B;AAEhCjB,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,EADA;AAEZiB,IAAAA,MAAM,EAAE;AAFI,GAFkB;AAMhCC,EAAAA,QAAQ,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzB,aAAO,EAAE,GAAGD,KAAL;AAAYpB,QAAAA,UAAU,EAAE,CAAC,GAAGqB,MAAM,CAACC,OAAX;AAAxB,OAAP;AACD;AAlBO,GANsB;AA0BhCC,EAAAA,aAAa,EAAE;AACb,KAACrB,aAAa,CAACsB,OAAf,GAA0BJ,KAAD,IAAW;AAClCA,MAAAA,KAAK,CAACH,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACf,aAAa,CAACuB,SAAf,GAA2B,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACpB,UAAN,GAAmBqB,MAAM,CAACC,OAA1B;AACAF,MAAAA,KAAK,CAACH,MAAN,GAAe,UAAf;AACD,KAPY;AAQb,KAACf,aAAa,CAACwB,QAAf,GAA2BN,KAAD,IAAW;AACnCA,MAAAA,KAAK,CAACH,MAAN,GAAe,QAAf;AACD;AAVY;AA1BiB,CAAD,CAAjC,C,CAwCA;AACA;;AAEA,eAAeF,aAAa,CAACY,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n    strategies: [],\n    loading: false,\n};\n\nexport const getStrategies = createAsyncThunk('strategies/getStrategies', async () => {\n        return fetch('http://127.0.0.1:3000/api/v1/strategies').then((res) => \n        res.json()\n         )\n      \n      // } catch (error) {\n      //   return thunkAPI.rejectWithValue({ error: error.message });\n      // }\n  });\n\nexport const addStrategy = createAsyncThunk(\n  \"strategies/addStrategy\",\n  async (thunkAPI) => {\n    try {\n      return await fetch(`http://localhost:3001/api/v1/strategies`),{\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      }\n        .then((res) => res.json());\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: 'strategies',\n  initialState: { \n    strategies: [], \n    status: null \n  },\n  reducers: {\n    // addName: (state, action) => {\n    //   return { ...state, addTitle: [...action.payload] };\n    // },\n    // addCategory: (state, action) => {\n    //   return { ...state, addCategory: [...action.payload] };\n    // },\n    // addTier: (state, action) => {\n    //   return { ...state, addTier: [...action.payload] };\n    // },\n    // addReference: (state, action) => {\n    //   return { ...state, addReference: [...action.payload] };\n    // },\n    // addDescription: (state, action) => {\n    //   return { ...state, addDescription: [...action.payload] };\n    // },\n    getAll: (state, action) => {\n      return { ...state, strategies: [...action.payload] };\n    }\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeess\";\n    },\n    [getStrategies.rejected]: (state) => {\n      state.status = \"failed\";\n    },\n  },\n});\n\n// export const { addName, addDescription, addReference, addCategory, addTier } =\n//   strategySlice.actions;\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}