{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  strategies: [],\n  loading: false\n};\nexport const getStrategies = createAsyncThunk(\"strategies/getStrategies\", async thunkAPI => {\n  try {\n    const strategies = await fetch(`http://127.0.0.1:3000/api/v1/strategies`).then(res => res.json()).then(data => data);\n    console.log(strategies);\n    strategies.push(strategies);\n    return strategies; // push the res into the strategies array\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n});\nconsole.log(strategies, 'selectStrategies');\nexport const addStrategy = createAsyncThunk(\"strategies/addStrategy\", async thunkAPI => {\n  try {\n    return await fetch(`http://localhost:3001/api/v1/strategies`), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }.then(res => res.json());\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: 'strategies',\n  initialState: {\n    strategies: [],\n    status: null\n  },\n  reducers: {\n    getAll: (state, action) => {\n      return { ...state,\n        strategies: [...action.payload]\n      };\n    }\n  },\n  extraReducers: {\n    [getStrategies.pending]: state => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeess\";\n    },\n    [getStrategies.rejected]: state => {\n      state.status = \"failed\";\n    }\n  }\n});\nexport const {\n  getAll\n} = strategySlice.actions;\nexport const selectStrategies = _ref => {\n  let {\n    strategies\n  } = _ref;\n  return strategies;\n};\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["createSlice","createAsyncThunk","initialState","strategies","loading","getStrategies","thunkAPI","fetch","then","res","json","data","console","log","push","error","rejectWithValue","message","addStrategy","method","headers","Accept","strategySlice","name","status","reducers","getAll","state","action","payload","extraReducers","pending","fulfilled","rejected","actions","selectStrategies","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAArB;AAKA,OAAO,MAAMC,aAAa,GAAGJ,gBAAgB,CAC3C,0BAD2C,EAE3C,MAAOK,QAAP,IAAoB;AAClB,MAAI;AACF,UAAMH,UAAU,GAAG,MAAMI,KAAK,CAAE,yCAAF,CAAL,CACtBC,IADsB,CAChBC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADQ,EAEtBF,IAFsB,CAEhBG,IAAD,IAAUA,IAFO,CAAzB;AAGEC,IAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ;AACFA,IAAAA,UAAU,CAACW,IAAX,CAAgBX,UAAhB;AACA,WAAOA,UAAP,CANE,CAOF;AACD,GARD,CAQE,OAAOY,KAAP,EAAc;AACd,WAAOT,QAAQ,CAACU,eAAT,CAAyB;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,KAAzB,CAAP;AACD;AACF,CAd0C,CAAtC;AAiBPL,OAAO,CAACC,GAAR,CAAYV,UAAZ,EAAwB,kBAAxB;AAEA,OAAO,MAAMe,WAAW,GAAGjB,gBAAgB,CACzC,wBADyC,EAEzC,MAAOK,QAAP,IAAoB;AAClB,MAAI;AACF,WAAO,MAAMC,KAAK,CAAE,yCAAF,CAAX,EAAuD;AAC5DY,MAAAA,MAAM,EAAE,MADoD;AAE5DC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AAFmD,MAO3Db,IAP2D,CAOrDC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAP6C,CAA9D;AAQD,GATD,CASE,OAAOK,KAAP,EAAc;AACd,WAAOT,QAAQ,CAACU,eAAT,CAAyB;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,KAAzB,CAAP;AACD;AACF,CAfwC,CAApC,C,CAkBP;;AAEA,MAAMK,aAAa,GAAGtB,WAAW,CAAC;AAChCuB,EAAAA,IAAI,EAAE,YAD0B;AAEhCrB,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,EADA;AAEZqB,IAAAA,MAAM,EAAE;AAFI,GAFkB;AAMhCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzB,aAAO,EAAE,GAAGD,KAAL;AAAYxB,QAAAA,UAAU,EAAE,CAAC,GAAGyB,MAAM,CAACC,OAAX;AAAxB,OAAP;AACD;AAHO,GANsB;AAWhCC,EAAAA,aAAa,EAAE;AACb,KAACzB,aAAa,CAAC0B,OAAf,GAA0BJ,KAAD,IAAW;AAClCA,MAAAA,KAAK,CAACH,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACnB,aAAa,CAAC2B,SAAf,GAA2B,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACxB,UAAN,GAAmByB,MAAM,CAACC,OAA1B;AACAF,MAAAA,KAAK,CAACH,MAAN,GAAe,UAAf;AACD,KAPY;AAQb,KAACnB,aAAa,CAAC4B,QAAf,GAA2BN,KAAD,IAAW;AACnCA,MAAAA,KAAK,CAACH,MAAN,GAAe,QAAf;AACD;AAVY;AAXiB,CAAD,CAAjC;AAyBA,OAAO,MAAM;AAAEE,EAAAA;AAAF,IAAaJ,aAAa,CAACY,OAAjC;AAEP,OAAO,MAAMC,gBAAgB,GAAG;AAAA,MAAC;AAAChC,IAAAA;AAAD,GAAD;AAAA,SAAkBA,UAAlB;AAAA,CAAzB;AAGP,eAAemB,aAAa,CAACc,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n\nconst initialState = {\n    strategies: [],\n  loading: false\n};\n\nexport const getStrategies = createAsyncThunk(\n  \"strategies/getStrategies\",\n  async (thunkAPI) => {\n    try {\n      const strategies = await fetch(`http://127.0.0.1:3000/api/v1/strategies`)\n        .then((res) => res.json())\n        .then((data) => data);\n        console.log(strategies);\n      strategies.push(strategies);\n      return strategies;\n      // push the res into the strategies array\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\nconsole.log(strategies, 'selectStrategies');\n\nexport const addStrategy = createAsyncThunk(\n  \"strategies/addStrategy\",\n  async (thunkAPI) => {\n    try {\n      return await fetch(`http://localhost:3001/api/v1/strategies`),{\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      }\n        .then((res) => res.json());\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: 'strategies',\n  initialState: { \n    strategies: [], \n    status: null \n  },\n  reducers: {\n    getAll: (state, action) => {\n      return { ...state, strategies: [...action.payload] };\n    }\n  },\n  extraReducers: {\n    [getStrategies.pending]: (state) => {\n      state.status = \"loading\";\n    },\n    [getStrategies.fulfilled]: (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"succeess\";\n    },\n    [getStrategies.rejected]: (state) => {\n      state.status = \"failed\";\n    },\n  },\n});\n\nexport const { getAll } = strategySlice.actions;\n\nexport const selectStrategies = ({strategies}) => strategies\n\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}