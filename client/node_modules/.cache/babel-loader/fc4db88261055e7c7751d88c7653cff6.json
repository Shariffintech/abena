{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const getStrategies = createAsyncThunk(\"strategies/getStrategies\", async thunkAPI => {\n  try {\n    const res = await fetch(`http://127.0.0.1:3000/api/v1/strategies`);\n    const strategies = await res.json();\n    return strategies;\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n});\nexport const addStrategy = createAsyncThunk(\"strategies/addStrategy\", async (strategyData, thunkAPI) => {\n  try {\n    const res = await fetch(`http://127.0.0.1:3000/api/v1/strategies`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(strategyData)\n    });\n    const strategy = await res.json();\n    return strategy;\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: {\n    strategies: [],\n    status: null\n  },\n\n  extraReducers(builder) {\n    builder.addCase(getStrategies.fulfilled, (state, action) => {\n      state.strategies = action.payload;\n      state.status = \"success\";\n    }).addCase(getStrategies.pending, (state, action) => {\n      state.status = \"loading\";\n    }).addCase(getStrategies.rejected, (state, action) => {\n      state.status = \"failed\";\n    }).addCase(addStrategy.fulfilled, (state, action) => {\n      state.strategies.push(action.payload);\n      state.status = \"success\";\n    }); // [getStrategies.pending]: (state) => {\n    //   state.status = \"loading\";\n    // },\n    // [getStrategies.fulfilled]: (state, action) => {\n    //   state.strategies = action.payload;\n    //   state.status = \"success\";\n    // },\n    // [getStrategies.rejected]: (state) => {\n    //   state.status = \"failed\";\n    // },\n  }\n\n}); // export const selectStrategies = ({strategies}) => strategies\n\nexport default strategySlice.reducer;","map":{"version":3,"sources":["/Users/shariftarver/Desktop/Software.eng/FlatironSchool/code/Mod5/abena-dms/client/src/components/strategies/strategySlice.js"],"names":["createSlice","createAsyncThunk","getStrategies","thunkAPI","res","fetch","strategies","json","error","rejectWithValue","message","addStrategy","strategyData","method","headers","body","JSON","stringify","strategy","strategySlice","name","initialState","status","extraReducers","builder","addCase","fulfilled","state","action","payload","pending","rejected","push","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,aAAa,GAAGD,gBAAgB,CAC3C,0BAD2C,EAE3C,MAAOE,QAAP,IAAoB;AAClB,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,yCAAF,CAAvB;AACA,UAAMC,UAAU,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAzB;AAEA,WAAOD,UAAP;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd,WAAOL,QAAQ,CAACM,eAAT,CAAyB;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,KAAzB,CAAP;AACD;AACF,CAX0C,CAAtC;AAcP,OAAO,MAAMC,WAAW,GAAGV,gBAAgB,CACzC,wBADyC,EAEzC,OAAOW,YAAP,EAAqBT,QAArB,KAAkC;AAChC,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,yCAAF,EAA4C;AACjEQ,MAAAA,MAAM,EAAE,MADyD;AAEjEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFwD;AAKjEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,YAAf;AAL2D,KAA5C,CAAvB;AAOA,UAAMM,QAAQ,GAAG,MAAMd,GAAG,CAACG,IAAJ,EAAvB;AACA,WAAOW,QAAP;AACD,GAVD,CAUE,OAAOV,KAAP,EAAc;AACd,WAAOL,QAAQ,CAACM,eAAT,CAAyB;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,KAAzB,CAAP;AACD;AACF,CAhBwC,CAApC,C,CAmBP;;AAEA,MAAMS,aAAa,GAAGnB,WAAW,CAAC;AAChCoB,EAAAA,IAAI,EAAE,YAD0B;AAEhCC,EAAAA,YAAY,EAAE;AACZf,IAAAA,UAAU,EAAE,EADA;AAEZgB,IAAAA,MAAM,EAAE;AAFI,GAFkB;;AAMhCC,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrBA,IAAAA,OAAO,CACJC,OADH,CACWvB,aAAa,CAACwB,SADzB,EACoC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAACrB,UAAN,GAAmBsB,MAAM,CAACC,OAA1B;AACAF,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACD,KAJH,EAKGG,OALH,CAKWvB,aAAa,CAAC4B,OALzB,EAKkC,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACD,KAPH,EAQGG,OARH,CAQWvB,aAAa,CAAC6B,QARzB,EAQmC,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACL,MAAN,GAAe,QAAf;AACD,KAVH,EAWGG,OAXH,CAWWd,WAAW,CAACe,SAXvB,EAWkC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACrB,UAAN,CAAiB0B,IAAjB,CAAsBJ,MAAM,CAACC,OAA7B;AACAF,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACD,KAdH,EADqB,CAiBrB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD;;AAlC+B,CAAD,CAAjC,C,CAqCA;;AAEA,eAAeH,aAAa,CAACc,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const getStrategies = createAsyncThunk(\n  \"strategies/getStrategies\",\n  async (thunkAPI) => {\n    try {\n      const res = await fetch(`http://127.0.0.1:3000/api/v1/strategies`);\n      const strategies = await res.json();\n\n      return strategies;\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\nexport const addStrategy = createAsyncThunk(\n  \"strategies/addStrategy\",\n  async (strategyData, thunkAPI) => {\n    try {\n      const res = await fetch(`http://127.0.0.1:3000/api/v1/strategies`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(strategyData),\n      });\n      const strategy = await res.json();\n      return strategy;\n    } catch (error) {\n      return thunkAPI.rejectWithValue({ error: error.message });\n    }\n  }\n);\n\n// add default status to each strategy \"not reviewed\"\n\nconst strategySlice = createSlice({\n  name: \"strategies\",\n  initialState: {\n    strategies: [],\n    status: null,\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(getStrategies.fulfilled, (state, action) => {\n        state.strategies = action.payload;\n        state.status = \"success\";\n      })\n      .addCase(getStrategies.pending, (state, action) => {\n        state.status = \"loading\";\n      })\n      .addCase(getStrategies.rejected, (state, action) => {\n        state.status = \"failed\";\n      })\n      .addCase(addStrategy.fulfilled, (state, action) => {\n        state.strategies.push(action.payload);\n        state.status = \"success\";\n      });\n\n    // [getStrategies.pending]: (state) => {\n    //   state.status = \"loading\";\n    // },\n    // [getStrategies.fulfilled]: (state, action) => {\n    //   state.strategies = action.payload;\n    //   state.status = \"success\";\n\n    // },\n    // [getStrategies.rejected]: (state) => {\n    //   state.status = \"failed\";\n    // },\n  },\n});\n\n// export const selectStrategies = ({strategies}) => strategies\n\nexport default strategySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}